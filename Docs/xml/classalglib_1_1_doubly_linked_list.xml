<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classalglib_1_1_doubly_linked_list" kind="class" language="C++" prot="public">
    <compoundname>alglib::DoublyLinkedList</compoundname>
    <includes refid="doubly__linked__list_8h" local="no">doubly_linked_list.h</includes>
    <innerclass refid="structalglib_1_1_doubly_linked_list_1_1_node" prot="private">alglib::DoublyLinkedList::Node</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classalglib_1_1_doubly_linked_list_1a2554dd46176394cf5a6a0c3319145b10" prot="private" static="no" mutable="no">
        <type>Node *</type>
        <definition>Node* alglib::DoublyLinkedList&lt; T &gt;::head_</definition>
        <argsstring></argsstring>
        <name>head_</name>
        <qualifiedname>alglib::DoublyLinkedList::head_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="99" column="8" bodyfile="Include/doubly_linked_list.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classalglib_1_1_doubly_linked_list_1ae3da537a2e764fbfac9af53867a5ba0f" prot="private" static="no" mutable="no">
        <type>Node *</type>
        <definition>Node* alglib::DoublyLinkedList&lt; T &gt;::tail_</definition>
        <argsstring></argsstring>
        <name>tail_</name>
        <qualifiedname>alglib::DoublyLinkedList::tail_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="100" column="8" bodyfile="Include/doubly_linked_list.h" bodystart="100" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classalglib_1_1_doubly_linked_list_1a6c98be24373caab3196ef758b5c2d33b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>alglib::DoublyLinkedList&lt; T &gt;::DoublyLinkedList</definition>
        <argsstring>()</argsstring>
        <name>DoublyLinkedList</name>
        <qualifiedname>alglib::DoublyLinkedList::DoublyLinkedList</qualifiedname>
        <briefdescription>
<para>Constructor for the doubly linked list. It initializes the head and tail pointers to nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="58" column="3" bodyfile="Include/doubly_linked_list.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_doubly_linked_list_1a29cbef42fe6e7a0015a1293741ddb0d4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void alglib::DoublyLinkedList&lt; T &gt;::Traverse</definition>
        <argsstring>(const std::function&lt; void(T)&gt; &amp;visit_callback) noexcept</argsstring>
        <name>Traverse</name>
        <qualifiedname>alglib::DoublyLinkedList::Traverse</qualifiedname>
        <param>
          <type>const std::function&lt; void(T)&gt; &amp;</type>
          <declname>visit_callback</declname>
        </param>
        <briefdescription>
<para>Method for traversing the doubly linked list. It starts at the head of the list and moves to the next node until the end of the list is reached. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="61" column="8" bodyfile="Include/doubly_linked_list.h" bodystart="124" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_doubly_linked_list_1ad461a49e8f7985adc7160c7b0a4d3170" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t alglib::DoublyLinkedList&lt; T &gt;::Size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Size</name>
        <qualifiedname>alglib::DoublyLinkedList::Size</qualifiedname>
        <briefdescription>
<para>Method for calculating the number of elements in the doubly linked list. It starts at the head of the list and moves to the next node until the end of the list is reached. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of nodes in list.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="62" column="10" bodyfile="Include/doubly_linked_list.h" bodystart="140" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_doubly_linked_list_1a18ecbc2bd367a5adf94f8bdb45aba644" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t alglib::DoublyLinkedList&lt; T &gt;::Find</definition>
        <argsstring>(const T value) const</argsstring>
        <name>Find</name>
        <qualifiedname>alglib::DoublyLinkedList::Find</qualifiedname>
        <param>
          <type>const T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Method for finding a value in the doubly linked list. It starts at the head of the list and moves to the next node until the end of the list is reached. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value that list is searched for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of element if found. (0 - first).</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="63" column="10" bodyfile="Include/doubly_linked_list.h" bodystart="157" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_doubly_linked_list_1a7a7147cf1a61a9785642ce0d9db96c8d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; alglib::DoublyLinkedList&lt; T &gt;::GetAsVector</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetAsVector</name>
        <qualifiedname>alglib::DoublyLinkedList::GetAsVector</qualifiedname>
        <briefdescription>
<para>Method for converting the doubly linked list to a vector. It starts at the head of the list and moves to the next node until the end of the list is reached. It is used for testing purposes. Using it in production code is not recommended as it is simply missing the point of the doubly linked list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Doubly linked list as vector.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="66" column="15" bodyfile="Include/doubly_linked_list.h" bodystart="181" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_doubly_linked_list_1ae5c4984f3b543255d77bc7dff712dae2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void alglib::DoublyLinkedList&lt; T &gt;::InsertAtBeginning</definition>
        <argsstring>(const T data) noexcept</argsstring>
        <name>InsertAtBeginning</name>
        <qualifiedname>alglib::DoublyLinkedList::InsertAtBeginning</qualifiedname>
        <param>
          <type>const T</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Method for inserting a new node at the beginning of the doubly linked list. It creates a new node with the given data and sets the next pointer of the new node to the head of the list. If the list is not empty, it sets the previous pointer of the head node to the new node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Value that will be inserted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="69" column="8" bodyfile="Include/doubly_linked_list.h" bodystart="200" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_doubly_linked_list_1a618478f1d0ddb6983e6a5328393aaa40" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void alglib::DoublyLinkedList&lt; T &gt;::InsertAtEnd</definition>
        <argsstring>(const T data) noexcept</argsstring>
        <name>InsertAtEnd</name>
        <qualifiedname>alglib::DoublyLinkedList::InsertAtEnd</qualifiedname>
        <param>
          <type>const T</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Method for inserting a new node at the end of the doubly linked list. It creates a new node with the given data and sets the next pointer of the last node in the list to the new node. If the list is empty, it sets the head pointer to the new node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Value that will be inserted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="70" column="8" bodyfile="Include/doubly_linked_list.h" bodystart="220" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_doubly_linked_list_1a13a231a242c15a554be2b8036da309d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alglib::DoublyLinkedList&lt; T &gt;::InsertAtPosition</definition>
        <argsstring>(const uint32_t pos, const T data)</argsstring>
        <name>InsertAtPosition</name>
        <qualifiedname>alglib::DoublyLinkedList::InsertAtPosition</qualifiedname>
        <param>
          <type>const uint32_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Method for inserting a new node at the given position in the doubly linked list. If the position is 0, insert at the beginning. If the position is equal to the size, insert at the end. Otherwise, link it into the middle. If pos is out of range, an exception is thrown. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position to insert the data (0-based index).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Value that will be inserted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="71" column="8" bodyfile="Include/doubly_linked_list.h" bodystart="241" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_doubly_linked_list_1a09d0d63d671d25354f023b526318f834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alglib::DoublyLinkedList&lt; T &gt;::DeleteAtBeginning</definition>
        <argsstring>()</argsstring>
        <name>DeleteAtBeginning</name>
        <qualifiedname>alglib::DoublyLinkedList::DeleteAtBeginning</qualifiedname>
        <briefdescription>
<para>Method for deleting the first node in the doubly linked list. If the list is empty, an exception is thrown. If the list has only one node, the node is deleted and the head pointer is set to nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="74" column="8" bodyfile="Include/doubly_linked_list.h" bodystart="274" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_doubly_linked_list_1a36a6aa7de2d8d22e917b2a2587f5d132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alglib::DoublyLinkedList&lt; T &gt;::DeleteAtEnd</definition>
        <argsstring>()</argsstring>
        <name>DeleteAtEnd</name>
        <qualifiedname>alglib::DoublyLinkedList::DeleteAtEnd</qualifiedname>
        <briefdescription>
<para>Method for deleting the last node in the doubly linked list. If the list is empty, an exception is thrown. If the list has only one node, the node is deleted and the head pointer is set to nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="75" column="8" bodyfile="Include/doubly_linked_list.h" bodystart="296" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_doubly_linked_list_1a334fc7e2ca9a862d8978b0a3150276bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alglib::DoublyLinkedList&lt; T &gt;::DeleteAtPosition</definition>
        <argsstring>(uint32_t pos)</argsstring>
        <name>DeleteAtPosition</name>
        <qualifiedname>alglib::DoublyLinkedList::DeleteAtPosition</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Deletes the node at the given position in the doubly linked list. If the list is empty, an exception is thrown. If the position is out of range, an exception is thrown. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of node to delete (0 - first).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="76" column="8" bodyfile="Include/doubly_linked_list.h" bodystart="319" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_doubly_linked_list_1a591a79bc036bebea7c7f82b5e46719f7" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool alglib::DoublyLinkedList&lt; T &gt;::IsEmpty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsEmpty</name>
        <qualifiedname>alglib::DoublyLinkedList::IsEmpty</qualifiedname>
        <briefdescription>
<para>Method for checking if the doubly linked list is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the list is empty, false otherwise.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="79" column="8" bodyfile="Include/doubly_linked_list.h" bodystart="371" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_doubly_linked_list_1a3793fbc2a10abfb97647386dae394770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>alglib::DoublyLinkedList&lt; T &gt;::~DoublyLinkedList</definition>
        <argsstring>()</argsstring>
        <name>~DoublyLinkedList</name>
        <qualifiedname>alglib::DoublyLinkedList::~DoublyLinkedList</qualifiedname>
        <briefdescription>
<para>Destructor for the doubly linked list. It traverses the list and deletes each node in the list. It also deletes the tail pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/doubly_linked_list.h" line="82" column="3" bodyfile="Include/doubly_linked_list.h" bodystart="355" bodyend="364"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Template based doubly linked list implementation. All nodes are dynamically allocated. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Include/doubly_linked_list.h" line="55" column="1" bodyfile="Include/doubly_linked_list.h" bodystart="55" bodyend="101"/>
    <listofallmembers>
      <member refid="classalglib_1_1_doubly_linked_list_1a09d0d63d671d25354f023b526318f834" prot="public" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>DeleteAtBeginning</name></member>
      <member refid="classalglib_1_1_doubly_linked_list_1a36a6aa7de2d8d22e917b2a2587f5d132" prot="public" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>DeleteAtEnd</name></member>
      <member refid="classalglib_1_1_doubly_linked_list_1a334fc7e2ca9a862d8978b0a3150276bd" prot="public" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>DeleteAtPosition</name></member>
      <member refid="classalglib_1_1_doubly_linked_list_1a6c98be24373caab3196ef758b5c2d33b" prot="public" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>DoublyLinkedList</name></member>
      <member refid="classalglib_1_1_doubly_linked_list_1a18ecbc2bd367a5adf94f8bdb45aba644" prot="public" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>Find</name></member>
      <member refid="classalglib_1_1_doubly_linked_list_1a7a7147cf1a61a9785642ce0d9db96c8d" prot="public" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>GetAsVector</name></member>
      <member refid="classalglib_1_1_doubly_linked_list_1a2554dd46176394cf5a6a0c3319145b10" prot="private" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>head_</name></member>
      <member refid="classalglib_1_1_doubly_linked_list_1ae5c4984f3b543255d77bc7dff712dae2" prot="public" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>InsertAtBeginning</name></member>
      <member refid="classalglib_1_1_doubly_linked_list_1a618478f1d0ddb6983e6a5328393aaa40" prot="public" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>InsertAtEnd</name></member>
      <member refid="classalglib_1_1_doubly_linked_list_1a13a231a242c15a554be2b8036da309d8" prot="public" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>InsertAtPosition</name></member>
      <member refid="classalglib_1_1_doubly_linked_list_1a591a79bc036bebea7c7f82b5e46719f7" prot="public" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>IsEmpty</name></member>
      <member refid="classalglib_1_1_doubly_linked_list_1ad461a49e8f7985adc7160c7b0a4d3170" prot="public" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>Size</name></member>
      <member refid="classalglib_1_1_doubly_linked_list_1ae3da537a2e764fbfac9af53867a5ba0f" prot="private" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>tail_</name></member>
      <member refid="classalglib_1_1_doubly_linked_list_1a29cbef42fe6e7a0015a1293741ddb0d4" prot="public" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>Traverse</name></member>
      <member refid="classalglib_1_1_doubly_linked_list_1a3793fbc2a10abfb97647386dae394770" prot="public" virt="non-virtual"><scope>alglib::DoublyLinkedList</scope><name>~DoublyLinkedList</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
