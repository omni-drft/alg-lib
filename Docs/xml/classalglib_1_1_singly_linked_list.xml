<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classalglib_1_1_singly_linked_list" kind="class" language="C++" prot="public">
    <compoundname>alglib::SinglyLinkedList</compoundname>
    <includes refid="singly__linked__list_8h" local="no">singly_linked_list.h</includes>
    <innerclass refid="structalglib_1_1_singly_linked_list_1_1_node" prot="private">alglib::SinglyLinkedList::Node</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classalglib_1_1_singly_linked_list_1afcf99d4ee5594b8288ccd692db391be6" prot="private" static="no" mutable="no">
        <type>Node *</type>
        <definition>Node* alglib::SinglyLinkedList&lt; T &gt;::head_</definition>
        <argsstring></argsstring>
        <name>head_</name>
        <qualifiedname>alglib::SinglyLinkedList::head_</qualifiedname>
        <briefdescription>
<para>Head pointer to the first node in the singly linked list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/singly_linked_list.h" line="105" column="8" bodyfile="Include/singly_linked_list.h" bodystart="105" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classalglib_1_1_singly_linked_list_1a8e353971d4696cb5f24cb9c7a1e14ed2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>alglib::SinglyLinkedList&lt; T &gt;::SinglyLinkedList</definition>
        <argsstring>()</argsstring>
        <name>SinglyLinkedList</name>
        <qualifiedname>alglib::SinglyLinkedList::SinglyLinkedList</qualifiedname>
        <briefdescription>
<para>Constructor for the <ref refid="classalglib_1_1_singly_linked_list" kindref="compound">SinglyLinkedList</ref> structure. Initializes the head pointer to nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/singly_linked_list.h" line="58" column="3" bodyfile="Include/singly_linked_list.h" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_singly_linked_list_1aa69114ff3c98ec2f8cb313771a790b6b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void alglib::SinglyLinkedList&lt; T &gt;::Traverse</definition>
        <argsstring>(const std::function&lt; void(T)&gt; &amp;visit_callback) noexcept</argsstring>
        <name>Traverse</name>
        <qualifiedname>alglib::SinglyLinkedList::Traverse</qualifiedname>
        <param>
          <type>const std::function&lt; void(T)&gt; &amp;</type>
          <declname>visit_callback</declname>
        </param>
        <briefdescription>
<para>Method that traverses the singly linked list and prints the data of each node. Modifying the method to do something else with the data is straight forward and can be done by changing the body of the while loop. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/singly_linked_list.h" line="61" column="8" bodyfile="Include/singly_linked_list.h" bodystart="131" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_singly_linked_list_1aa1f6fcf5be2225dede8966ebba128fda" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t alglib::SinglyLinkedList&lt; T &gt;::Size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Size</name>
        <qualifiedname>alglib::SinglyLinkedList::Size</qualifiedname>
        <briefdescription>
<para>Method that calculates number of nodes in the singly linked list by traversing the list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of nodes in structure as size_t.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/singly_linked_list.h" line="62" column="10" bodyfile="Include/singly_linked_list.h" bodystart="146" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_singly_linked_list_1a8c4c43bee7eb6e6a8fb08e3e657e7dbc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t alglib::SinglyLinkedList&lt; T &gt;::Find</definition>
        <argsstring>(T value) const</argsstring>
        <name>Find</name>
        <qualifiedname>alglib::SinglyLinkedList::Find</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Method that searches for a value in the singly linked list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value that the list will be searched for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of first occurance of given value (0 = first).</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/singly_linked_list.h" line="63" column="10" bodyfile="Include/singly_linked_list.h" bodystart="162" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_singly_linked_list_1a5b0a7a2c3f404c66b4a23131492de22d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; alglib::SinglyLinkedList&lt; T &gt;::GetAsVector</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetAsVector</name>
        <qualifiedname>alglib::SinglyLinkedList::GetAsVector</qualifiedname>
        <briefdescription>
<para>Method that converts the singly linked list to a vector. It is used for teseing purposes. Using it in production code is not recommended as it is simply missing the point of the singly linked list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector of nodes that are in structure.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/singly_linked_list.h" line="66" column="15" bodyfile="Include/singly_linked_list.h" bodystart="186" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_singly_linked_list_1a3086ae26d59dd8757425442fbf567a80" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void alglib::SinglyLinkedList&lt; T &gt;::InsertAtBeginning</definition>
        <argsstring>(T value) noexcept</argsstring>
        <name>InsertAtBeginning</name>
        <qualifiedname>alglib::SinglyLinkedList::InsertAtBeginning</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Method that inserts a new node at the beginning of the singly linked list by creating a new node and pointing it to the current head. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for the new node.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/singly_linked_list.h" line="69" column="8" bodyfile="Include/singly_linked_list.h" bodystart="203" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_singly_linked_list_1ac0c0c71d9dc7467c259da8a7c7ef9f75" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void alglib::SinglyLinkedList&lt; T &gt;::InsertAtEnd</definition>
        <argsstring>(T value) noexcept</argsstring>
        <name>InsertAtEnd</name>
        <qualifiedname>alglib::SinglyLinkedList::InsertAtEnd</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Method that inserts a new node at the end of the singly linked list by traversing the list and adding the new node to the last node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for the new node.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/singly_linked_list.h" line="70" column="8" bodyfile="Include/singly_linked_list.h" bodystart="215" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_singly_linked_list_1abc385633efce02bace4b422daf682725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alglib::SinglyLinkedList&lt; T &gt;::InsertAtPosition</definition>
        <argsstring>(uint32_t pos, T value)</argsstring>
        <name>InsertAtPosition</name>
        <qualifiedname>alglib::SinglyLinkedList::InsertAtPosition</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Method that inserts a new node at the given position in the singly linked list by traversing the list to find the possition and splicing the new node in. &lt;/summary <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position for the new node (0 - first).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for the new node.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/singly_linked_list.h" line="71" column="8" bodyfile="Include/singly_linked_list.h" bodystart="239" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_singly_linked_list_1a26b0d9d4099269dc0d4bb28eb7a75eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alglib::SinglyLinkedList&lt; T &gt;::DeleteAtBeggining</definition>
        <argsstring>()</argsstring>
        <name>DeleteAtBeggining</name>
        <qualifiedname>alglib::SinglyLinkedList::DeleteAtBeggining</qualifiedname>
        <briefdescription>
<para>Method for deleting the first node in the singly linked list by pointing the head to the next node and deleting the first node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/singly_linked_list.h" line="74" column="8" bodyfile="Include/singly_linked_list.h" bodystart="265" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_singly_linked_list_1a7094ebb3471a4892009255aeb7920f29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alglib::SinglyLinkedList&lt; T &gt;::DeleteAtEnd</definition>
        <argsstring>()</argsstring>
        <name>DeleteAtEnd</name>
        <qualifiedname>alglib::SinglyLinkedList::DeleteAtEnd</qualifiedname>
        <briefdescription>
<para>Method for deleting the last node in the singly linked list by traversing the list to the last node and deleting it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/singly_linked_list.h" line="75" column="8" bodyfile="Include/singly_linked_list.h" bodystart="283" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_singly_linked_list_1a0ba315f9c3a749d764aad56e15e0a619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alglib::SinglyLinkedList&lt; T &gt;::DeleteAtPosition</definition>
        <argsstring>(uint32_t pos)</argsstring>
        <name>DeleteAtPosition</name>
        <qualifiedname>alglib::SinglyLinkedList::DeleteAtPosition</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Method for deleting a node at a given position in the singly linked list by traversing the list to the given position and splicing the node out. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the node to delete (0 - first).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/singly_linked_list.h" line="76" column="8" bodyfile="Include/singly_linked_list.h" bodystart="303" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classalglib_1_1_singly_linked_list_1aa46f9cd4366f6a59dd526caba2bab570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>alglib::SinglyLinkedList&lt; T &gt;::~SinglyLinkedList</definition>
        <argsstring>()</argsstring>
        <name>~SinglyLinkedList</name>
        <qualifiedname>alglib::SinglyLinkedList::~SinglyLinkedList</qualifiedname>
        <briefdescription>
<para>Method for deleting the singly linked list. It traverses the list and deletes each node as they are dynamically allocated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/singly_linked_list.h" line="79" column="3" bodyfile="Include/singly_linked_list.h" bodystart="331" bodyend="338"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Template based singly linked list implementation. All nodes are dynamically allocated. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Include/singly_linked_list.h" line="55" column="1" bodyfile="Include/singly_linked_list.h" bodystart="55" bodyend="106"/>
    <listofallmembers>
      <member refid="classalglib_1_1_singly_linked_list_1a26b0d9d4099269dc0d4bb28eb7a75eac" prot="public" virt="non-virtual"><scope>alglib::SinglyLinkedList</scope><name>DeleteAtBeggining</name></member>
      <member refid="classalglib_1_1_singly_linked_list_1a7094ebb3471a4892009255aeb7920f29" prot="public" virt="non-virtual"><scope>alglib::SinglyLinkedList</scope><name>DeleteAtEnd</name></member>
      <member refid="classalglib_1_1_singly_linked_list_1a0ba315f9c3a749d764aad56e15e0a619" prot="public" virt="non-virtual"><scope>alglib::SinglyLinkedList</scope><name>DeleteAtPosition</name></member>
      <member refid="classalglib_1_1_singly_linked_list_1a8c4c43bee7eb6e6a8fb08e3e657e7dbc" prot="public" virt="non-virtual"><scope>alglib::SinglyLinkedList</scope><name>Find</name></member>
      <member refid="classalglib_1_1_singly_linked_list_1a5b0a7a2c3f404c66b4a23131492de22d" prot="public" virt="non-virtual"><scope>alglib::SinglyLinkedList</scope><name>GetAsVector</name></member>
      <member refid="classalglib_1_1_singly_linked_list_1afcf99d4ee5594b8288ccd692db391be6" prot="private" virt="non-virtual"><scope>alglib::SinglyLinkedList</scope><name>head_</name></member>
      <member refid="classalglib_1_1_singly_linked_list_1a3086ae26d59dd8757425442fbf567a80" prot="public" virt="non-virtual"><scope>alglib::SinglyLinkedList</scope><name>InsertAtBeginning</name></member>
      <member refid="classalglib_1_1_singly_linked_list_1ac0c0c71d9dc7467c259da8a7c7ef9f75" prot="public" virt="non-virtual"><scope>alglib::SinglyLinkedList</scope><name>InsertAtEnd</name></member>
      <member refid="classalglib_1_1_singly_linked_list_1abc385633efce02bace4b422daf682725" prot="public" virt="non-virtual"><scope>alglib::SinglyLinkedList</scope><name>InsertAtPosition</name></member>
      <member refid="classalglib_1_1_singly_linked_list_1a8e353971d4696cb5f24cb9c7a1e14ed2" prot="public" virt="non-virtual"><scope>alglib::SinglyLinkedList</scope><name>SinglyLinkedList</name></member>
      <member refid="classalglib_1_1_singly_linked_list_1aa1f6fcf5be2225dede8966ebba128fda" prot="public" virt="non-virtual"><scope>alglib::SinglyLinkedList</scope><name>Size</name></member>
      <member refid="classalglib_1_1_singly_linked_list_1aa69114ff3c98ec2f8cb313771a790b6b" prot="public" virt="non-virtual"><scope>alglib::SinglyLinkedList</scope><name>Traverse</name></member>
      <member refid="classalglib_1_1_singly_linked_list_1aa46f9cd4366f6a59dd526caba2bab570" prot="public" virt="non-virtual"><scope>alglib::SinglyLinkedList</scope><name>~SinglyLinkedList</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
