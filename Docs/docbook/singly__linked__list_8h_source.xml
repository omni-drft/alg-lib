<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_singly__linked__list_8h_source" xml:lang="en-US">
<title>singly_linked_list.h</title>
<indexterm><primary>Include/singly_linked_list.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_singly__linked__list_8h_source_1l00001"/>00001 <emphasis role="comment">//*****************************************************************************</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00002"/>00002 <emphasis role="comment">//&#32;The&#32;MIT&#32;License&#32;(MIT)</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00003"/>00003 <emphasis role="comment">//</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00004"/>00004 <emphasis role="comment">//&#32;Copyright&#32;©&#32;2024&#32;Piotr&#32;Walczak</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00005"/>00005 <emphasis role="comment">//</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00006"/>00006 <emphasis role="comment">//&#32;Permission&#32;is&#32;hereby&#32;granted,&#32;free&#32;of&#32;charge,&#32;to&#32;any&#32;person&#32;obtaining&#32;a&#32;copy</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00007"/>00007 <emphasis role="comment">//&#32;of&#32;this&#32;software&#32;and&#32;associated&#32;documentation&#32;files&#32;(the&#32;“Software”),&#32;to</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00008"/>00008 <emphasis role="comment">//&#32;deal&#32;in&#32;the&#32;Software&#32;without&#32;restriction,&#32;including&#32;without&#32;limitation&#32;the</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00009"/>00009 <emphasis role="comment">//&#32;rights&#32;to&#32;use,&#32;copy,&#32;modify,&#32;merge,&#32;publish,&#32;distribute,&#32;sublicense,&#32;and/or</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00010"/>00010 <emphasis role="comment">//&#32;sell&#32;copies&#32;of&#32;the&#32;Software,&#32;and&#32;to&#32;permit&#32;persons&#32;to&#32;whom&#32;the&#32;Software&#32;is</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00011"/>00011 <emphasis role="comment">//&#32;furnished&#32;to&#32;do&#32;so,&#32;subject&#32;to&#32;the&#32;following&#32;conditions:</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00012"/>00012 <emphasis role="comment">//</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00013"/>00013 <emphasis role="comment">//&#32;The&#32;above&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;shall&#32;be&#32;included&#32;in</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00014"/>00014 <emphasis role="comment">//&#32;all&#32;copies&#32;or&#32;substantial&#32;portions&#32;of&#32;the&#32;Software.</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00015"/>00015 <emphasis role="comment">//</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00016"/>00016 <emphasis role="comment">//&#32;THE&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;“AS&#32;IS”,&#32;WITHOUT&#32;WARRANTY&#32;OF&#32;ANY&#32;KIND,&#32;EXPRESS&#32;OR</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00017"/>00017 <emphasis role="comment">//&#32;IMPLIED,&#32;INCLUDING&#32;BUT&#32;NOT&#32;LIMITED&#32;TO&#32;THE&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY,</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00018"/>00018 <emphasis role="comment">//&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE&#32;AND&#32;NONINFRINGEMENT.&#32;IN&#32;NO&#32;EVENT&#32;SHALL</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00019"/>00019 <emphasis role="comment">//&#32;THE&#32;AUTHORS&#32;OR&#32;COPYRIGHT&#32;HOLDERS&#32;BE&#32;LIABLE&#32;FOR&#32;ANY&#32;CLAIM,&#32;DAMAGES&#32;OR&#32;OTHER</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00020"/>00020 <emphasis role="comment">//&#32;LIABILITY,&#32;WHETHER&#32;IN&#32;AN&#32;ACTION&#32;OF&#32;CONTRACT,&#32;TORT&#32;OR&#32;OTHERWISE,&#32;ARISING</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00021"/>00021 <emphasis role="comment">//&#32;FROM,&#32;OUT&#32;OF&#32;OR&#32;IN&#32;CONNECTION&#32;WITH&#32;THE&#32;SOFTWARE&#32;OR&#32;THE&#32;USE&#32;OR&#32;OTHER&#32;DEALINGS</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00022"/>00022 <emphasis role="comment">//&#32;IN&#32;THE&#32;SOFTWARE.</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00023"/>00023 <emphasis role="comment">//*****************************************************************************</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00024"/>00024 
<anchor xml:id="_singly__linked__list_8h_source_1l00025"/>00025 <emphasis role="comment">//*****************************************************************************</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00026"/>00026 <emphasis role="comment">//&#32;File:&#32;singly_linked_list.h</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00027"/>00027 <emphasis role="comment">//</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00028"/>00028 <emphasis role="comment">//&#32;This&#32;file&#32;contains&#32;the&#32;implementation&#32;of&#32;the&#32;SinglyLinkedList&#32;class.</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00029"/>00029 <emphasis role="comment">//&#32;Implementation&#32;is&#32;based&#32;on&#32;templates,&#32;so&#32;the&#32;class&#32;can&#32;be&#32;used&#32;with&#32;any</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00030"/>00030 <emphasis role="comment">//&#32;type.&#32;SinglyLinkedList&#32;contains&#32;methods&#32;for&#32;inserting,&#32;deleting,&#32;and</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00031"/>00031 <emphasis role="comment">//&#32;searching&#32;for&#32;elements.&#32;It&#32;has&#32;its&#32;own&#32;node&#32;structure&#32;that&#32;contains&#32;the</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00032"/>00032 <emphasis role="comment">//&#32;data&#32;and&#32;a&#32;pointer&#32;to&#32;the&#32;next&#32;node.&#32;The&#32;class&#32;is&#32;implemented&#32;in&#32;the</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00033"/>00033 <emphasis role="comment">//&#32;alglib&#32;namespace.</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00034"/>00034 <emphasis role="comment">//*****************************************************************************</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00035"/>00035 
<anchor xml:id="_singly__linked__list_8h_source_1l00036"/>00036 <emphasis role="preprocessor">#ifndef&#32;ALGLIB_INCLUDE_SINGLYLINKEDLIST_H_</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00037"/>00037 <emphasis role="preprocessor">#define&#32;ALGLIB_INCLUDE_SINGLYLINKEDLIST_H_</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00038"/>00038 
<anchor xml:id="_singly__linked__list_8h_source_1l00039"/>00039 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00040"/>00040 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00041"/>00041 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00042"/>00042 
<anchor xml:id="_singly__linked__list_8h_source_1l00043"/>00043 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_constants_8h">constants.h</link>&quot;</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00044"/>00044 
<anchor xml:id="_singly__linked__list_8h_source_1l00048"/>00048 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacealglib">alglib</link>&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00049"/>00049 
<anchor xml:id="_singly__linked__list_8h_source_1l00054"/>00054 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_singly__linked__list_8h_source_1l00055"/><link linkend="_classalglib_1_1_singly_linked_list">00055</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classalglib_1_1_singly_linked_list_1a8e353971d4696cb5f24cb9c7a1e14ed2">SinglyLinkedList</link>&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00056"/>00056 &#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="_singly__linked__list_8h_source_1l00057"/>00057 &#32;&#32;<emphasis role="comment">//&#32;Constructor&#32;for&#32;the&#32;singly&#32;linked&#32;list.</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00058"/>00058 &#32;&#32;<link linkend="_classalglib_1_1_singly_linked_list_1a8e353971d4696cb5f24cb9c7a1e14ed2">SinglyLinkedList</link>();
<anchor xml:id="_singly__linked__list_8h_source_1l00059"/>00059 
<anchor xml:id="_singly__linked__list_8h_source_1l00060"/>00060 &#32;&#32;<emphasis role="comment">//&#32;Methods&#32;for&#32;exploring&#32;the&#32;singly&#32;linked&#32;list.</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00061"/>00061 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1aa69114ff3c98ec2f8cb313771a790b6b">Traverse</link>(<emphasis role="keyword">const</emphasis>&#32;std::function&lt;<emphasis role="keywordtype">void</emphasis>(T)&gt;&#32;&amp;visit_callback)&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_singly__linked__list_8h_source_1l00062"/>00062 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1aa1f6fcf5be2225dede8966ebba128fda">Size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_singly__linked__list_8h_source_1l00063"/>00063 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1a8c4c43bee7eb6e6a8fb08e3e657e7dbc">Find</link>(T&#32;value)&#32;<emphasis role="keyword">const</emphasis>;
<anchor xml:id="_singly__linked__list_8h_source_1l00064"/>00064 
<anchor xml:id="_singly__linked__list_8h_source_1l00065"/>00065 &#32;&#32;<emphasis role="comment">//&#32;Method&#32;for&#32;converting&#32;the&#32;singly&#32;linked&#32;list&#32;to&#32;a&#32;vector.</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00066"/>00066 &#32;&#32;std::vector&lt;T&gt;&#32;<link linkend="_classalglib_1_1_singly_linked_list_1a5b0a7a2c3f404c66b4a23131492de22d">GetAsVector</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_singly__linked__list_8h_source_1l00067"/>00067 
<anchor xml:id="_singly__linked__list_8h_source_1l00068"/>00068 &#32;&#32;<emphasis role="comment">//&#32;Insertion&#32;methods</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00069"/>00069 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1a3086ae26d59dd8757425442fbf567a80">InsertAtBeginning</link>(T&#32;value)&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_singly__linked__list_8h_source_1l00070"/>00070 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1ac0c0c71d9dc7467c259da8a7c7ef9f75">InsertAtEnd</link>(T&#32;value)&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_singly__linked__list_8h_source_1l00071"/>00071 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1abc385633efce02bace4b422daf682725">InsertAtPosition</link>(uint32_t&#32;pos,&#32;T&#32;value);
<anchor xml:id="_singly__linked__list_8h_source_1l00072"/>00072 
<anchor xml:id="_singly__linked__list_8h_source_1l00073"/>00073 &#32;&#32;<emphasis role="comment">//&#32;Deletion&#32;methods</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00074"/>00074 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1a26b0d9d4099269dc0d4bb28eb7a75eac">DeleteAtBeggining</link>();
<anchor xml:id="_singly__linked__list_8h_source_1l00075"/>00075 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1a7094ebb3471a4892009255aeb7920f29">DeleteAtEnd</link>();
<anchor xml:id="_singly__linked__list_8h_source_1l00076"/>00076 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1a0ba315f9c3a749d764aad56e15e0a619">DeleteAtPosition</link>(uint32_t&#32;pos);
<anchor xml:id="_singly__linked__list_8h_source_1l00077"/>00077 
<anchor xml:id="_singly__linked__list_8h_source_1l00078"/>00078 &#32;&#32;<emphasis role="comment">//&#32;Destructor&#32;for&#32;the&#32;singly&#32;linked&#32;list.</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00079"/>00079 &#32;&#32;<link linkend="_classalglib_1_1_singly_linked_list_1aa46f9cd4366f6a59dd526caba2bab570">~SinglyLinkedList</link>();
<anchor xml:id="_singly__linked__list_8h_source_1l00080"/>00080 
<anchor xml:id="_singly__linked__list_8h_source_1l00081"/>00081 &#32;<emphasis role="keyword">private</emphasis>:
<anchor xml:id="_singly__linked__list_8h_source_1l00086"/>00086 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Node&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00087"/>00087 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constructor&#32;for&#32;the&#32;Node&#32;structure.</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00088"/>00088 &#32;&#32;&#32;&#32;Node(T&#32;data);
<anchor xml:id="_singly__linked__list_8h_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Destructor&#32;for&#32;the&#32;Node&#32;structure.</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00090"/>00090 &#32;&#32;&#32;&#32;~Node()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
<anchor xml:id="_singly__linked__list_8h_source_1l00091"/>00091 
<anchor xml:id="_singly__linked__list_8h_source_1l00095"/>00095 &#32;&#32;&#32;&#32;Node&#32;*next;
<anchor xml:id="_singly__linked__list_8h_source_1l00099"/>00099 &#32;&#32;&#32;&#32;T&#32;data;
<anchor xml:id="_singly__linked__list_8h_source_1l00100"/>00100 &#32;&#32;};
<anchor xml:id="_singly__linked__list_8h_source_1l00101"/>00101 
<anchor xml:id="_singly__linked__list_8h_source_1l00105"/>00105 &#32;&#32;Node&#32;*head_;
<anchor xml:id="_singly__linked__list_8h_source_1l00106"/>00106 };
<anchor xml:id="_singly__linked__list_8h_source_1l00107"/>00107 
<anchor xml:id="_singly__linked__list_8h_source_1l00114"/>00114 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_singly__linked__list_8h_source_1l00115"/>00115 SinglyLinkedList&lt;T&gt;::Node::Node(T&#32;data)&#32;:&#32;next(nullptr),&#32;data(data)&#32;{}
<anchor xml:id="_singly__linked__list_8h_source_1l00116"/>00116 
<anchor xml:id="_singly__linked__list_8h_source_1l00121"/>00121 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_singly__linked__list_8h_source_1l00122"/><link linkend="_classalglib_1_1_singly_linked_list_1a8e353971d4696cb5f24cb9c7a1e14ed2">00122</link> <link linkend="_classalglib_1_1_singly_linked_list_1a8e353971d4696cb5f24cb9c7a1e14ed2">SinglyLinkedList&lt;T&gt;::SinglyLinkedList</link>()&#32;:&#32;head_(nullptr)&#32;{}
<anchor xml:id="_singly__linked__list_8h_source_1l00123"/>00123 
<anchor xml:id="_singly__linked__list_8h_source_1l00130"/>00130 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_singly__linked__list_8h_source_1l00131"/><link linkend="_classalglib_1_1_singly_linked_list_1aa69114ff3c98ec2f8cb313771a790b6b">00131</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1aa69114ff3c98ec2f8cb313771a790b6b">SinglyLinkedList&lt;T&gt;::Traverse</link>(
<anchor xml:id="_singly__linked__list_8h_source_1l00132"/>00132 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::function&lt;<emphasis role="keywordtype">void</emphasis>(T)&gt;&#32;&amp;visit_callback)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00133"/>00133 &#32;&#32;Node&#32;*tmp{head_};
<anchor xml:id="_singly__linked__list_8h_source_1l00134"/>00134 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(tmp)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00135"/>00135 &#32;&#32;&#32;&#32;visit_callback(tmp-&gt;data);
<anchor xml:id="_singly__linked__list_8h_source_1l00136"/>00136 &#32;&#32;&#32;&#32;tmp&#32;=&#32;tmp-&gt;next;
<anchor xml:id="_singly__linked__list_8h_source_1l00137"/>00137 &#32;&#32;}
<anchor xml:id="_singly__linked__list_8h_source_1l00138"/>00138 }
<anchor xml:id="_singly__linked__list_8h_source_1l00139"/>00139 
<anchor xml:id="_singly__linked__list_8h_source_1l00145"/>00145 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_singly__linked__list_8h_source_1l00146"/><link linkend="_classalglib_1_1_singly_linked_list_1aa1f6fcf5be2225dede8966ebba128fda">00146</link> <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1aa1f6fcf5be2225dede8966ebba128fda">SinglyLinkedList&lt;T&gt;::Size</link>()&#32;const&#32;noexcept&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00147"/>00147 &#32;&#32;Node&#32;*tmp{head_};
<anchor xml:id="_singly__linked__list_8h_source_1l00148"/>00148 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;count{};
<anchor xml:id="_singly__linked__list_8h_source_1l00149"/>00149 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(tmp)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00150"/>00150 &#32;&#32;&#32;&#32;++count;
<anchor xml:id="_singly__linked__list_8h_source_1l00151"/>00151 &#32;&#32;&#32;&#32;tmp&#32;=&#32;tmp-&gt;next;
<anchor xml:id="_singly__linked__list_8h_source_1l00152"/>00152 &#32;&#32;}
<anchor xml:id="_singly__linked__list_8h_source_1l00153"/>00153 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
<anchor xml:id="_singly__linked__list_8h_source_1l00154"/>00154 }
<anchor xml:id="_singly__linked__list_8h_source_1l00155"/>00155 
<anchor xml:id="_singly__linked__list_8h_source_1l00161"/>00161 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_singly__linked__list_8h_source_1l00162"/><link linkend="_classalglib_1_1_singly_linked_list_1a8c4c43bee7eb6e6a8fb08e3e657e7dbc">00162</link> <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1a8c4c43bee7eb6e6a8fb08e3e657e7dbc">SinglyLinkedList&lt;T&gt;::Find</link>(T&#32;value)<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_singly__linked__list_8h_source_1l00163"/>00163 &#32;&#32;Node&#32;*tmp{head_};
<anchor xml:id="_singly__linked__list_8h_source_1l00164"/>00164 
<anchor xml:id="_singly__linked__list_8h_source_1l00165"/>00165 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;count{};
<anchor xml:id="_singly__linked__list_8h_source_1l00166"/>00166 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(tmp&#32;&amp;&amp;&#32;tmp-&gt;data&#32;!=&#32;value)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00167"/>00167 &#32;&#32;&#32;&#32;++count;
<anchor xml:id="_singly__linked__list_8h_source_1l00168"/>00168 &#32;&#32;&#32;&#32;tmp&#32;=&#32;tmp-&gt;next;
<anchor xml:id="_singly__linked__list_8h_source_1l00169"/>00169 &#32;&#32;}
<anchor xml:id="_singly__linked__list_8h_source_1l00170"/>00170 
<anchor xml:id="_singly__linked__list_8h_source_1l00171"/>00171 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tmp&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00172"/>00172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<link linkend="_namespacealglib_1_1errors_1a7f08c1055421a42acd3c96dac7dbb82f">errors::kItemNotFound</link>);
<anchor xml:id="_singly__linked__list_8h_source_1l00173"/>00173 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00174"/>00174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
<anchor xml:id="_singly__linked__list_8h_source_1l00175"/>00175 &#32;&#32;}
<anchor xml:id="_singly__linked__list_8h_source_1l00176"/>00176 }
<anchor xml:id="_singly__linked__list_8h_source_1l00177"/>00177 
<anchor xml:id="_singly__linked__list_8h_source_1l00185"/>00185 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_singly__linked__list_8h_source_1l00186"/><link linkend="_classalglib_1_1_singly_linked_list_1a5b0a7a2c3f404c66b4a23131492de22d">00186</link> std::vector&lt;T&gt;&#32;<link linkend="_classalglib_1_1_singly_linked_list_1a5b0a7a2c3f404c66b4a23131492de22d">SinglyLinkedList&lt;T&gt;::GetAsVector</link>()&#32;const&#32;noexcept&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00187"/>00187 &#32;&#32;std::vector&lt;T&gt;&#32;vec{};
<anchor xml:id="_singly__linked__list_8h_source_1l00188"/>00188 &#32;&#32;vec.reserve(<link linkend="_classalglib_1_1_singly_linked_list_1aa1f6fcf5be2225dede8966ebba128fda">Size</link>());
<anchor xml:id="_singly__linked__list_8h_source_1l00189"/>00189 &#32;&#32;Node&#32;*tmp{head_};
<anchor xml:id="_singly__linked__list_8h_source_1l00190"/>00190 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(tmp)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00191"/>00191 &#32;&#32;&#32;&#32;vec.emplace_back(tmp-&gt;data);
<anchor xml:id="_singly__linked__list_8h_source_1l00192"/>00192 &#32;&#32;&#32;&#32;tmp&#32;=&#32;tmp-&gt;next;
<anchor xml:id="_singly__linked__list_8h_source_1l00193"/>00193 &#32;&#32;}
<anchor xml:id="_singly__linked__list_8h_source_1l00194"/>00194 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vec;
<anchor xml:id="_singly__linked__list_8h_source_1l00195"/>00195 }
<anchor xml:id="_singly__linked__list_8h_source_1l00196"/>00196 
<anchor xml:id="_singly__linked__list_8h_source_1l00202"/>00202 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_singly__linked__list_8h_source_1l00203"/><link linkend="_classalglib_1_1_singly_linked_list_1a3086ae26d59dd8757425442fbf567a80">00203</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1a3086ae26d59dd8757425442fbf567a80">SinglyLinkedList&lt;T&gt;::InsertAtBeginning</link>(T&#32;value)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00204"/>00204 &#32;&#32;Node&#32;*new_node{<emphasis role="keyword">new</emphasis>&#32;Node(value)};
<anchor xml:id="_singly__linked__list_8h_source_1l00205"/>00205 &#32;&#32;new_node-&gt;next&#32;=&#32;head_;
<anchor xml:id="_singly__linked__list_8h_source_1l00206"/>00206 &#32;&#32;head_&#32;=&#32;new_node;
<anchor xml:id="_singly__linked__list_8h_source_1l00207"/>00207 }
<anchor xml:id="_singly__linked__list_8h_source_1l00208"/>00208 
<anchor xml:id="_singly__linked__list_8h_source_1l00214"/>00214 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_singly__linked__list_8h_source_1l00215"/><link linkend="_classalglib_1_1_singly_linked_list_1ac0c0c71d9dc7467c259da8a7c7ef9f75">00215</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1ac0c0c71d9dc7467c259da8a7c7ef9f75">SinglyLinkedList&lt;T&gt;::InsertAtEnd</link>(T&#32;value)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00216"/>00216 &#32;&#32;Node&#32;*new_node{<emphasis role="keyword">new</emphasis>&#32;Node(value)};
<anchor xml:id="_singly__linked__list_8h_source_1l00217"/>00217 
<anchor xml:id="_singly__linked__list_8h_source_1l00218"/>00218 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(head_&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00219"/>00219 &#32;&#32;&#32;&#32;head_&#32;=&#32;new_node;
<anchor xml:id="_singly__linked__list_8h_source_1l00220"/>00220 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_singly__linked__list_8h_source_1l00221"/>00221 &#32;&#32;}
<anchor xml:id="_singly__linked__list_8h_source_1l00222"/>00222 
<anchor xml:id="_singly__linked__list_8h_source_1l00223"/>00223 &#32;&#32;Node&#32;*tmp{head_};
<anchor xml:id="_singly__linked__list_8h_source_1l00224"/>00224 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(tmp-&gt;next)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00225"/>00225 &#32;&#32;&#32;&#32;tmp&#32;=&#32;tmp-&gt;next;
<anchor xml:id="_singly__linked__list_8h_source_1l00226"/>00226 &#32;&#32;}
<anchor xml:id="_singly__linked__list_8h_source_1l00227"/>00227 
<anchor xml:id="_singly__linked__list_8h_source_1l00228"/>00228 &#32;&#32;tmp-&gt;next&#32;=&#32;new_node;
<anchor xml:id="_singly__linked__list_8h_source_1l00229"/>00229 }
<anchor xml:id="_singly__linked__list_8h_source_1l00230"/>00230 
<anchor xml:id="_singly__linked__list_8h_source_1l00238"/>00238 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_singly__linked__list_8h_source_1l00239"/><link linkend="_classalglib_1_1_singly_linked_list_1abc385633efce02bace4b422daf682725">00239</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1abc385633efce02bace4b422daf682725">SinglyLinkedList&lt;T&gt;::InsertAtPosition</link>(uint32_t&#32;pos,&#32;T&#32;value)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00240"/>00240 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00241"/>00241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<link linkend="_namespacealglib_1_1errors_1afcfcd5dc808b27df606d5761cb149bb9">errors::kIndexOutOfRange</link>);
<anchor xml:id="_singly__linked__list_8h_source_1l00242"/>00242 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;==&#32;0)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00243"/>00243 &#32;&#32;&#32;&#32;Node&#32;*newNode{<emphasis role="keyword">new</emphasis>&#32;Node(value)};
<anchor xml:id="_singly__linked__list_8h_source_1l00244"/>00244 &#32;&#32;&#32;&#32;newNode-&gt;next&#32;=&#32;head_;
<anchor xml:id="_singly__linked__list_8h_source_1l00245"/>00245 &#32;&#32;&#32;&#32;head_&#32;=&#32;newNode;
<anchor xml:id="_singly__linked__list_8h_source_1l00246"/>00246 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00247"/>00247 &#32;&#32;&#32;&#32;Node&#32;*tmp{head_};
<anchor xml:id="_singly__linked__list_8h_source_1l00248"/>00248 &#32;&#32;&#32;&#32;uint32_t&#32;count{};
<anchor xml:id="_singly__linked__list_8h_source_1l00249"/>00249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(count&#32;&lt;&#32;pos&#32;-&#32;1&#32;&amp;&amp;&#32;tmp&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;tmp-&gt;next;
<anchor xml:id="_singly__linked__list_8h_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;++count;
<anchor xml:id="_singly__linked__list_8h_source_1l00252"/>00252 &#32;&#32;&#32;&#32;}
<anchor xml:id="_singly__linked__list_8h_source_1l00253"/>00253 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tmp&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<link linkend="_namespacealglib_1_1errors_1afcfcd5dc808b27df606d5761cb149bb9">errors::kIndexOutOfRange</link>);
<anchor xml:id="_singly__linked__list_8h_source_1l00254"/>00254 &#32;&#32;&#32;&#32;Node&#32;*newNode{<emphasis role="keyword">new</emphasis>&#32;Node(value)};
<anchor xml:id="_singly__linked__list_8h_source_1l00255"/>00255 &#32;&#32;&#32;&#32;newNode-&gt;next&#32;=&#32;tmp-&gt;next;
<anchor xml:id="_singly__linked__list_8h_source_1l00256"/>00256 &#32;&#32;&#32;&#32;tmp-&gt;next&#32;=&#32;newNode;
<anchor xml:id="_singly__linked__list_8h_source_1l00257"/>00257 &#32;&#32;}
<anchor xml:id="_singly__linked__list_8h_source_1l00258"/>00258 }
<anchor xml:id="_singly__linked__list_8h_source_1l00259"/>00259 
<anchor xml:id="_singly__linked__list_8h_source_1l00264"/>00264 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_singly__linked__list_8h_source_1l00265"/><link linkend="_classalglib_1_1_singly_linked_list_1a26b0d9d4099269dc0d4bb28eb7a75eac">00265</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1a26b0d9d4099269dc0d4bb28eb7a75eac">SinglyLinkedList&lt;T&gt;::DeleteAtBeggining</link>()&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00266"/>00266 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(head_&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00267"/>00267 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<link linkend="_namespacealglib_1_1errors_1a702e2c90c47734fc2bb07d6b773968a9">errors::kEmptyDeletion</link>);
<anchor xml:id="_singly__linked__list_8h_source_1l00268"/>00268 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(head_-&gt;next&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00269"/>00269 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;head_;
<anchor xml:id="_singly__linked__list_8h_source_1l00270"/>00270 &#32;&#32;&#32;&#32;head_&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_singly__linked__list_8h_source_1l00271"/>00271 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00272"/>00272 &#32;&#32;&#32;&#32;Node&#32;*tmp{head_};
<anchor xml:id="_singly__linked__list_8h_source_1l00273"/>00273 &#32;&#32;&#32;&#32;head_&#32;=&#32;head_-&gt;next;
<anchor xml:id="_singly__linked__list_8h_source_1l00274"/>00274 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;tmp;
<anchor xml:id="_singly__linked__list_8h_source_1l00275"/>00275 &#32;&#32;}
<anchor xml:id="_singly__linked__list_8h_source_1l00276"/>00276 }
<anchor xml:id="_singly__linked__list_8h_source_1l00277"/>00277 
<anchor xml:id="_singly__linked__list_8h_source_1l00282"/>00282 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_singly__linked__list_8h_source_1l00283"/><link linkend="_classalglib_1_1_singly_linked_list_1a7094ebb3471a4892009255aeb7920f29">00283</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1a7094ebb3471a4892009255aeb7920f29">SinglyLinkedList&lt;T&gt;::DeleteAtEnd</link>()&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00284"/>00284 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(head_&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00285"/>00285 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<link linkend="_namespacealglib_1_1errors_1a702e2c90c47734fc2bb07d6b773968a9">errors::kEmptyDeletion</link>);
<anchor xml:id="_singly__linked__list_8h_source_1l00286"/>00286 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(head_-&gt;next&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00287"/>00287 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;head_;
<anchor xml:id="_singly__linked__list_8h_source_1l00288"/>00288 &#32;&#32;&#32;&#32;head_&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_singly__linked__list_8h_source_1l00289"/>00289 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00290"/>00290 &#32;&#32;&#32;&#32;Node&#32;*tmp{head_};
<anchor xml:id="_singly__linked__list_8h_source_1l00291"/>00291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(tmp-&gt;next-&gt;next&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;tmp&#32;=&#32;tmp-&gt;next;
<anchor xml:id="_singly__linked__list_8h_source_1l00292"/>00292 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;tmp-&gt;next;
<anchor xml:id="_singly__linked__list_8h_source_1l00293"/>00293 &#32;&#32;&#32;&#32;tmp-&gt;next&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_singly__linked__list_8h_source_1l00294"/>00294 &#32;&#32;}
<anchor xml:id="_singly__linked__list_8h_source_1l00295"/>00295 }
<anchor xml:id="_singly__linked__list_8h_source_1l00296"/>00296 
<anchor xml:id="_singly__linked__list_8h_source_1l00302"/>00302 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_singly__linked__list_8h_source_1l00303"/><link linkend="_classalglib_1_1_singly_linked_list_1a0ba315f9c3a749d764aad56e15e0a619">00303</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classalglib_1_1_singly_linked_list_1a0ba315f9c3a749d764aad56e15e0a619">SinglyLinkedList&lt;T&gt;::DeleteAtPosition</link>(uint32_t&#32;pos)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00304"/>00304 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(head_&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00305"/>00305 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<link linkend="_namespacealglib_1_1errors_1a702e2c90c47734fc2bb07d6b773968a9">errors::kEmptyDeletion</link>);
<anchor xml:id="_singly__linked__list_8h_source_1l00306"/>00306 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;==&#32;0)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00307"/>00307 &#32;&#32;&#32;&#32;Node&#32;*tmp{head_};
<anchor xml:id="_singly__linked__list_8h_source_1l00308"/>00308 &#32;&#32;&#32;&#32;head_&#32;=&#32;head_-&gt;next;
<anchor xml:id="_singly__linked__list_8h_source_1l00309"/>00309 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;tmp;
<anchor xml:id="_singly__linked__list_8h_source_1l00310"/>00310 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00311"/>00311 &#32;&#32;&#32;&#32;Node&#32;*tmp{head_};
<anchor xml:id="_singly__linked__list_8h_source_1l00312"/>00312 &#32;&#32;&#32;&#32;uint32_t&#32;count{};
<anchor xml:id="_singly__linked__list_8h_source_1l00313"/>00313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(count&#32;&lt;&#32;pos&#32;-&#32;1&#32;&amp;&amp;&#32;tmp&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;=&#32;tmp-&gt;next;
<anchor xml:id="_singly__linked__list_8h_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;++count;
<anchor xml:id="_singly__linked__list_8h_source_1l00316"/>00316 &#32;&#32;&#32;&#32;}
<anchor xml:id="_singly__linked__list_8h_source_1l00317"/>00317 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tmp&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>&#32;||&#32;tmp-&gt;next&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)
<anchor xml:id="_singly__linked__list_8h_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<link linkend="_namespacealglib_1_1errors_1afcfcd5dc808b27df606d5761cb149bb9">errors::kIndexOutOfRange</link>);
<anchor xml:id="_singly__linked__list_8h_source_1l00319"/>00319 &#32;&#32;&#32;&#32;Node&#32;*toDelete{tmp-&gt;next};
<anchor xml:id="_singly__linked__list_8h_source_1l00320"/>00320 &#32;&#32;&#32;&#32;tmp-&gt;next&#32;=&#32;toDelete-&gt;next;
<anchor xml:id="_singly__linked__list_8h_source_1l00321"/>00321 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;toDelete;
<anchor xml:id="_singly__linked__list_8h_source_1l00322"/>00322 &#32;&#32;}
<anchor xml:id="_singly__linked__list_8h_source_1l00323"/>00323 }
<anchor xml:id="_singly__linked__list_8h_source_1l00324"/>00324 
<anchor xml:id="_singly__linked__list_8h_source_1l00330"/>00330 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_singly__linked__list_8h_source_1l00331"/><link linkend="_classalglib_1_1_singly_linked_list_1aa46f9cd4366f6a59dd526caba2bab570">00331</link> <link linkend="_classalglib_1_1_singly_linked_list_1aa46f9cd4366f6a59dd526caba2bab570">SinglyLinkedList&lt;T&gt;::~SinglyLinkedList</link>()&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00332"/>00332 &#32;&#32;Node&#32;*tmp{head_};
<anchor xml:id="_singly__linked__list_8h_source_1l00333"/>00333 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(tmp)&#32;{
<anchor xml:id="_singly__linked__list_8h_source_1l00334"/>00334 &#32;&#32;&#32;&#32;Node&#32;*next{tmp-&gt;next};
<anchor xml:id="_singly__linked__list_8h_source_1l00335"/>00335 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;tmp;
<anchor xml:id="_singly__linked__list_8h_source_1l00336"/>00336 &#32;&#32;&#32;&#32;tmp&#32;=&#32;next;
<anchor xml:id="_singly__linked__list_8h_source_1l00337"/>00337 &#32;&#32;}
<anchor xml:id="_singly__linked__list_8h_source_1l00338"/>00338 }
<anchor xml:id="_singly__linked__list_8h_source_1l00339"/>00339 
<anchor xml:id="_singly__linked__list_8h_source_1l00340"/>00340 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;alglib</emphasis>
<anchor xml:id="_singly__linked__list_8h_source_1l00341"/>00341 
<anchor xml:id="_singly__linked__list_8h_source_1l00342"/>00342 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;ALGLIB_INCLUDE_SINGLYLINKEDLIST_H_</emphasis>
</programlisting></section>
