<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classalglib_1_1_singly_linked_list" xml:lang="en-US">
<title>alglib::SinglyLinkedList&lt; T &gt; Class Template Reference</title>
<indexterm><primary>alglib::SinglyLinkedList&lt; T &gt;</primary></indexterm>
<para>

<para>Template based singly linked list implementation. All nodes are dynamically allocated. </para>
 
</para>
<para>
<computeroutput>#include &lt;singly_linked_list.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classalglib_1_1_singly_linked_list_1a8e353971d4696cb5f24cb9c7a1e14ed2">SinglyLinkedList</link> ()</para>

<para>Constructor for the <link linkend="_classalglib_1_1_singly_linked_list">SinglyLinkedList</link> structure. Initializes the head pointer to nullptr. </para>
</listitem>
            <listitem><para>void <link linkend="_classalglib_1_1_singly_linked_list_1aa69114ff3c98ec2f8cb313771a790b6b">Traverse</link> (const std::function&lt; void(T)&gt; &amp;visit_callback) noexcept</para>

<para>Method that traverses the singly linked list and prints the data of each node. Modifying the method to do something else with the data is straight forward and can be done by changing the body of the while loop. </para>
</listitem>
            <listitem><para>size_t <link linkend="_classalglib_1_1_singly_linked_list_1aa1f6fcf5be2225dede8966ebba128fda">Size</link> () const noexcept</para>

<para>Method that calculates number of nodes in the singly linked list by traversing the list. </para>
</listitem>
            <listitem><para>size_t <link linkend="_classalglib_1_1_singly_linked_list_1a8c4c43bee7eb6e6a8fb08e3e657e7dbc">Find</link> (T value) const</para>

<para>Method that searches for a value in the singly linked list. </para>
</listitem>
            <listitem><para>std::vector&lt; T &gt; <link linkend="_classalglib_1_1_singly_linked_list_1a5b0a7a2c3f404c66b4a23131492de22d">GetAsVector</link> () const noexcept</para>

<para>Method that converts the singly linked list to a vector. It is used for teseing purposes. Using it in production code is not recommended as it is simply missing the point of the singly linked list. </para>
</listitem>
            <listitem><para>void <link linkend="_classalglib_1_1_singly_linked_list_1a3086ae26d59dd8757425442fbf567a80">InsertAtBeginning</link> (T value) noexcept</para>

<para>Method that inserts a new node at the beginning of the singly linked list by creating a new node and pointing it to the current head. </para>
</listitem>
            <listitem><para>void <link linkend="_classalglib_1_1_singly_linked_list_1ac0c0c71d9dc7467c259da8a7c7ef9f75">InsertAtEnd</link> (T value) noexcept</para>

<para>Method that inserts a new node at the end of the singly linked list by traversing the list and adding the new node to the last node. </para>
</listitem>
            <listitem><para>void <link linkend="_classalglib_1_1_singly_linked_list_1abc385633efce02bace4b422daf682725">InsertAtPosition</link> (uint32_t pos, T value)</para>

<para>Method that inserts a new node at the given position in the singly linked list by traversing the list to find the possition and splicing the new node in. &lt;/summary 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pos</entry><entry>
<para>Position for the new node (0 - first).</para>
</entry>
                            </row>
                            <row>
<entry>value</entry><entry>
<para>Value for the new node.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</listitem>
            <listitem><para>void <link linkend="_classalglib_1_1_singly_linked_list_1a26b0d9d4099269dc0d4bb28eb7a75eac">DeleteAtBeggining</link> ()</para>

<para>Method for deleting the first node in the singly linked list by pointing the head to the next node and deleting the first node. </para>
</listitem>
            <listitem><para>void <link linkend="_classalglib_1_1_singly_linked_list_1a7094ebb3471a4892009255aeb7920f29">DeleteAtEnd</link> ()</para>

<para>Method for deleting the last node in the singly linked list by traversing the list to the last node and deleting it. </para>
</listitem>
            <listitem><para>void <link linkend="_classalglib_1_1_singly_linked_list_1a0ba315f9c3a749d764aad56e15e0a619">DeleteAtPosition</link> (uint32_t pos)</para>

<para>Method for deleting a node at a given position in the singly linked list by traversing the list to the given position and splicing the node out. </para>
</listitem>
            <listitem><para><link linkend="_classalglib_1_1_singly_linked_list_1aa46f9cd4366f6a59dd526caba2bab570">~SinglyLinkedList</link> ()</para>

<para>Method for deleting the singly linked list. It traverses the list and deletes each node as they are dynamically allocated. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename T&gt;<?linebreak?>class alglib::SinglyLinkedList&lt; T &gt;</title></simplesect>

<para>Template based singly linked list implementation. All nodes are dynamically allocated. </para>
<para>
Definition at line <link linkend="_singly__linked__list_8h_source_1l00055">55</link> of file <link linkend="_singly__linked__list_8h_source">singly_linked_list.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classalglib_1_1_singly_linked_list_1a8e353971d4696cb5f24cb9c7a1e14ed2"/><section>
    <title>SinglyLinkedList()</title>
<indexterm><primary>SinglyLinkedList</primary><secondary>alglib::SinglyLinkedList&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SinglyLinkedList&lt; T &gt;</primary><secondary>SinglyLinkedList</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput><link linkend="_classalglib_1_1_singly_linked_list">alglib::SinglyLinkedList</link>&lt; T &gt;::SinglyLinkedList ( )</computeroutput></para><para>

<para>Constructor for the <link linkend="_classalglib_1_1_singly_linked_list">SinglyLinkedList</link> structure. Initializes the head pointer to nullptr. </para>
</para>
<para>
Definition at line <link linkend="_singly__linked__list_8h_source_1l00122">122</link> of file <link linkend="_singly__linked__list_8h_source">singly_linked_list.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_singly_linked_list_1aa46f9cd4366f6a59dd526caba2bab570"/><section>
    <title>~SinglyLinkedList()</title>
<indexterm><primary>~SinglyLinkedList</primary><secondary>alglib::SinglyLinkedList&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SinglyLinkedList&lt; T &gt;</primary><secondary>~SinglyLinkedList</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput><link linkend="_classalglib_1_1_singly_linked_list">alglib::SinglyLinkedList</link>&lt; T &gt;::~<link linkend="_classalglib_1_1_singly_linked_list">SinglyLinkedList</link> ( )</computeroutput></para><para>

<para>Method for deleting the singly linked list. It traverses the list and deletes each node as they are dynamically allocated. </para>
</para>
<para>
Definition at line <link linkend="_singly__linked__list_8h_source_1l00331">331</link> of file <link linkend="_singly__linked__list_8h_source">singly_linked_list.h</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classalglib_1_1_singly_linked_list_1a26b0d9d4099269dc0d4bb28eb7a75eac"/><section>
    <title>DeleteAtBeggining()</title>
<indexterm><primary>DeleteAtBeggining</primary><secondary>alglib::SinglyLinkedList&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SinglyLinkedList&lt; T &gt;</primary><secondary>DeleteAtBeggining</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>void <link linkend="_classalglib_1_1_singly_linked_list">alglib::SinglyLinkedList</link>&lt; T &gt;::DeleteAtBeggining ( )</computeroutput></para><para>

<para>Method for deleting the first node in the singly linked list by pointing the head to the next node and deleting the first node. </para>
</para>
<para>
Definition at line <link linkend="_singly__linked__list_8h_source_1l00265">265</link> of file <link linkend="_singly__linked__list_8h_source">singly_linked_list.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_singly_linked_list_1a7094ebb3471a4892009255aeb7920f29"/><section>
    <title>DeleteAtEnd()</title>
<indexterm><primary>DeleteAtEnd</primary><secondary>alglib::SinglyLinkedList&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SinglyLinkedList&lt; T &gt;</primary><secondary>DeleteAtEnd</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>void <link linkend="_classalglib_1_1_singly_linked_list">alglib::SinglyLinkedList</link>&lt; T &gt;::DeleteAtEnd ( )</computeroutput></para><para>

<para>Method for deleting the last node in the singly linked list by traversing the list to the last node and deleting it. </para>
</para>
<para>
Definition at line <link linkend="_singly__linked__list_8h_source_1l00283">283</link> of file <link linkend="_singly__linked__list_8h_source">singly_linked_list.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_singly_linked_list_1a0ba315f9c3a749d764aad56e15e0a619"/><section>
    <title>DeleteAtPosition()</title>
<indexterm><primary>DeleteAtPosition</primary><secondary>alglib::SinglyLinkedList&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SinglyLinkedList&lt; T &gt;</primary><secondary>DeleteAtPosition</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>void <link linkend="_classalglib_1_1_singly_linked_list">alglib::SinglyLinkedList</link>&lt; T &gt;::DeleteAtPosition (uint32_t pos)</computeroutput></para><para>

<para>Method for deleting a node at a given position in the singly linked list by traversing the list to the given position and splicing the node out. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pos</entry><entry>
<para>Position of the node to delete (0 - first).</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_singly__linked__list_8h_source_1l00303">303</link> of file <link linkend="_singly__linked__list_8h_source">singly_linked_list.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_singly_linked_list_1a8c4c43bee7eb6e6a8fb08e3e657e7dbc"/><section>
    <title>Find()</title>
<indexterm><primary>Find</primary><secondary>alglib::SinglyLinkedList&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SinglyLinkedList&lt; T &gt;</primary><secondary>Find</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>size_t <link linkend="_classalglib_1_1_singly_linked_list">alglib::SinglyLinkedList</link>&lt; T &gt;::Find (T value) const</computeroutput></para><para>

<para>Method that searches for a value in the singly linked list. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>value</entry><entry>
<para>Value that the list will be searched for.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Index of first occurance of given value (0 = first).</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_singly__linked__list_8h_source_1l00162">162</link> of file <link linkend="_singly__linked__list_8h_source">singly_linked_list.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_singly_linked_list_1a5b0a7a2c3f404c66b4a23131492de22d"/><section>
    <title>GetAsVector()</title>
<indexterm><primary>GetAsVector</primary><secondary>alglib::SinglyLinkedList&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SinglyLinkedList&lt; T &gt;</primary><secondary>GetAsVector</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>std::vector&lt; T &gt; <link linkend="_classalglib_1_1_singly_linked_list">alglib::SinglyLinkedList</link>&lt; T &gt;::GetAsVector ( ) const<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Method that converts the singly linked list to a vector. It is used for teseing purposes. Using it in production code is not recommended as it is simply missing the point of the singly linked list. </para>
</para>

<para><formalpara><title>Returns</title>

<para>std::vector of nodes that are in structure.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_singly__linked__list_8h_source_1l00186">186</link> of file <link linkend="_singly__linked__list_8h_source">singly_linked_list.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_singly_linked_list_1a3086ae26d59dd8757425442fbf567a80"/><section>
    <title>InsertAtBeginning()</title>
<indexterm><primary>InsertAtBeginning</primary><secondary>alglib::SinglyLinkedList&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SinglyLinkedList&lt; T &gt;</primary><secondary>InsertAtBeginning</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>void <link linkend="_classalglib_1_1_singly_linked_list">alglib::SinglyLinkedList</link>&lt; T &gt;::InsertAtBeginning (T value)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Method that inserts a new node at the beginning of the singly linked list by creating a new node and pointing it to the current head. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>value</entry><entry>
<para>Value for the new node.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_singly__linked__list_8h_source_1l00203">203</link> of file <link linkend="_singly__linked__list_8h_source">singly_linked_list.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_singly_linked_list_1ac0c0c71d9dc7467c259da8a7c7ef9f75"/><section>
    <title>InsertAtEnd()</title>
<indexterm><primary>InsertAtEnd</primary><secondary>alglib::SinglyLinkedList&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SinglyLinkedList&lt; T &gt;</primary><secondary>InsertAtEnd</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>void <link linkend="_classalglib_1_1_singly_linked_list">alglib::SinglyLinkedList</link>&lt; T &gt;::InsertAtEnd (T value)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Method that inserts a new node at the end of the singly linked list by traversing the list and adding the new node to the last node. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>value</entry><entry>
<para>Value for the new node.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_singly__linked__list_8h_source_1l00215">215</link> of file <link linkend="_singly__linked__list_8h_source">singly_linked_list.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_singly_linked_list_1abc385633efce02bace4b422daf682725"/><section>
    <title>InsertAtPosition()</title>
<indexterm><primary>InsertAtPosition</primary><secondary>alglib::SinglyLinkedList&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SinglyLinkedList&lt; T &gt;</primary><secondary>InsertAtPosition</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>void <link linkend="_classalglib_1_1_singly_linked_list">alglib::SinglyLinkedList</link>&lt; T &gt;::InsertAtPosition (uint32_t pos, T value)</computeroutput></para><para>

<para>Method that inserts a new node at the given position in the singly linked list by traversing the list to find the possition and splicing the new node in. &lt;/summary 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pos</entry><entry>
<para>Position for the new node (0 - first).</para>
</entry>
                            </row>
                            <row>
<entry>value</entry><entry>
<para>Value for the new node.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</para>
<para>
Definition at line <link linkend="_singly__linked__list_8h_source_1l00239">239</link> of file <link linkend="_singly__linked__list_8h_source">singly_linked_list.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_singly_linked_list_1aa1f6fcf5be2225dede8966ebba128fda"/><section>
    <title>Size()</title>
<indexterm><primary>Size</primary><secondary>alglib::SinglyLinkedList&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SinglyLinkedList&lt; T &gt;</primary><secondary>Size</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>size_t <link linkend="_classalglib_1_1_singly_linked_list">alglib::SinglyLinkedList</link>&lt; T &gt;::Size ( ) const<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Method that calculates number of nodes in the singly linked list by traversing the list. </para>
</para>

<para><formalpara><title>Returns</title>

<para>Number of nodes in structure as size_t.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_singly__linked__list_8h_source_1l00146">146</link> of file <link linkend="_singly__linked__list_8h_source">singly_linked_list.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_singly_linked_list_1aa69114ff3c98ec2f8cb313771a790b6b"/><section>
    <title>Traverse()</title>
<indexterm><primary>Traverse</primary><secondary>alglib::SinglyLinkedList&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SinglyLinkedList&lt; T &gt;</primary><secondary>Traverse</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>void <link linkend="_classalglib_1_1_singly_linked_list">alglib::SinglyLinkedList</link>&lt; T &gt;::Traverse (const std::function&lt; void(T)&gt; &amp; visit_callback)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Method that traverses the singly linked list and prints the data of each node. Modifying the method to do something else with the data is straight forward and can be done by changing the body of the while loop. </para>
</para>
<para>
Definition at line <link linkend="_singly__linked__list_8h_source_1l00131">131</link> of file <link linkend="_singly__linked__list_8h_source">singly_linked_list.h</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Include/<link linkend="_singly__linked__list_8h">singly_linked_list.h</link></section>
</section>
