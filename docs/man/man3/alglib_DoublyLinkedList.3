.TH "alglib::DoublyLinkedList< T >" 3 "Version 1.0.0" "AlgLib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
alglib::DoublyLinkedList< T > \- Template based doubly linked list implementation\&. All nodes are dynamically allocated\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <doubly_linked_list\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDoublyLinkedList\fP ()"
.br
.RI "Constructor for the doubly linked list\&. It initializes the head and tail pointers to nullptr\&. "
.ti -1c
.RI "void \fBTraverse\fP (const std::function< void(T)> &visit_callback) noexcept"
.br
.RI "Method for traversing the doubly linked list\&. It starts at the head of the list and moves to the next node until the end of the list is reached\&. "
.ti -1c
.RI "size_t \fBSize\fP () const noexcept"
.br
.RI "Method for calculating the number of elements in the doubly linked list\&. It starts at the head of the list and moves to the next node until the end of the list is reached\&. "
.ti -1c
.RI "size_t \fBFind\fP (const T value) const"
.br
.RI "Method for finding a value in the doubly linked list\&. It starts at the head of the list and moves to the next node until the end of the list is reached\&. "
.ti -1c
.RI "std::vector< T > \fBGetAsVector\fP () const noexcept"
.br
.RI "Method for converting the doubly linked list to a vector\&. It starts at the head of the list and moves to the next node until the end of the list is reached\&. It is used for testing purposes\&. Using it in production code is not recommended as it is simply missing the point of the doubly linked list\&. "
.ti -1c
.RI "void \fBInsertAtBeginning\fP (const T data) noexcept"
.br
.RI "Method for inserting a new node at the beginning of the doubly linked list\&. It creates a new node with the given data and sets the next pointer of the new node to the head of the list\&. If the list is not empty, it sets the previous pointer of the head node to the new node\&. "
.ti -1c
.RI "void \fBInsertAtEnd\fP (const T data) noexcept"
.br
.RI "Method for inserting a new node at the end of the doubly linked list\&. It creates a new node with the given data and sets the next pointer of the last node in the list to the new node\&. If the list is empty, it sets the head pointer to the new node\&. "
.ti -1c
.RI "void \fBInsertAtPosition\fP (const uint32_t pos, const T data)"
.br
.RI "Method for inserting a new node at the given position in the doubly linked list\&. If the position is 0, insert at the beginning\&. If the position is equal to the size, insert at the end\&. Otherwise, link it into the middle\&. If pos is out of range, an exception is thrown\&. "
.ti -1c
.RI "void \fBDeleteAtBeginning\fP ()"
.br
.RI "Method for deleting the first node in the doubly linked list\&. If the list is empty, an exception is thrown\&. If the list has only one node, the node is deleted and the head pointer is set to nullptr\&. "
.ti -1c
.RI "void \fBDeleteAtEnd\fP ()"
.br
.RI "Method for deleting the last node in the doubly linked list\&. If the list is empty, an exception is thrown\&. If the list has only one node, the node is deleted and the head pointer is set to nullptr\&. "
.ti -1c
.RI "void \fBDeleteAtPosition\fP (uint32_t pos)"
.br
.RI "Deletes the node at the given position in the doubly linked list\&. If the list is empty, an exception is thrown\&. If the position is out of range, an exception is thrown\&. "
.ti -1c
.RI "bool \fBIsEmpty\fP () const noexcept"
.br
.RI "Method for checking if the doubly linked list is empty\&. "
.ti -1c
.RI "\fB~DoublyLinkedList\fP ()"
.br
.RI "Destructor for the doubly linked list\&. It traverses the list and deletes each node in the list\&. It also deletes the tail pointer\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T>
.br
class alglib::DoublyLinkedList< T >"Template based doubly linked list implementation\&. All nodes are dynamically allocated\&. 
.PP
Definition at line \fB55\fP of file \fBdoubly_linked_list\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T> \fBalglib::DoublyLinkedList\fP< T >::DoublyLinkedList ()"

.PP
Constructor for the doubly linked list\&. It initializes the head and tail pointers to nullptr\&. 
.PP
Definition at line \fB117\fP of file \fBdoubly_linked_list\&.h\fP\&.
.SS "template<typename T> \fBalglib::DoublyLinkedList\fP< T >::~\fBDoublyLinkedList\fP ()"

.PP
Destructor for the doubly linked list\&. It traverses the list and deletes each node in the list\&. It also deletes the tail pointer\&. 
.PP
Definition at line \fB355\fP of file \fBdoubly_linked_list\&.h\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename T> void \fBalglib::DoublyLinkedList\fP< T >::DeleteAtBeginning ()"

.PP
Method for deleting the first node in the doubly linked list\&. If the list is empty, an exception is thrown\&. If the list has only one node, the node is deleted and the head pointer is set to nullptr\&. 
.PP
Definition at line \fB274\fP of file \fBdoubly_linked_list\&.h\fP\&.
.SS "template<typename T> void \fBalglib::DoublyLinkedList\fP< T >::DeleteAtEnd ()"

.PP
Method for deleting the last node in the doubly linked list\&. If the list is empty, an exception is thrown\&. If the list has only one node, the node is deleted and the head pointer is set to nullptr\&. 
.PP
Definition at line \fB296\fP of file \fBdoubly_linked_list\&.h\fP\&.
.SS "template<typename T> void \fBalglib::DoublyLinkedList\fP< T >::DeleteAtPosition (uint32_t pos)"

.PP
Deletes the node at the given position in the doubly linked list\&. If the list is empty, an exception is thrown\&. If the position is out of range, an exception is thrown\&. 
.PP
\fBParameters\fP
.RS 4
\fIpos\fP Position of node to delete (0 - first)\&.
.RE
.PP

.PP
Definition at line \fB319\fP of file \fBdoubly_linked_list\&.h\fP\&.
.SS "template<typename T> size_t \fBalglib::DoublyLinkedList\fP< T >::Find (const T value) const"

.PP
Method for finding a value in the doubly linked list\&. It starts at the head of the list and moves to the next node until the end of the list is reached\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value that list is searched for\&.
.RE
.PP
\fBReturns\fP
.RS 4
Index of element if found\&. (0 - first)\&.
.RE
.PP

.PP
Definition at line \fB157\fP of file \fBdoubly_linked_list\&.h\fP\&.
.SS "template<typename T> std::vector< T > \fBalglib::DoublyLinkedList\fP< T >::GetAsVector () const\fR [noexcept]\fP"

.PP
Method for converting the doubly linked list to a vector\&. It starts at the head of the list and moves to the next node until the end of the list is reached\&. It is used for testing purposes\&. Using it in production code is not recommended as it is simply missing the point of the doubly linked list\&. 
.PP
\fBReturns\fP
.RS 4
Doubly linked list as vector\&.
.RE
.PP

.PP
Definition at line \fB181\fP of file \fBdoubly_linked_list\&.h\fP\&.
.SS "template<typename T> void \fBalglib::DoublyLinkedList\fP< T >::InsertAtBeginning (const T data)\fR [noexcept]\fP"

.PP
Method for inserting a new node at the beginning of the doubly linked list\&. It creates a new node with the given data and sets the next pointer of the new node to the head of the list\&. If the list is not empty, it sets the previous pointer of the head node to the new node\&. 
.PP
\fBParameters\fP
.RS 4
\fIdata\fP Value that will be inserted\&.
.RE
.PP

.PP
Definition at line \fB200\fP of file \fBdoubly_linked_list\&.h\fP\&.
.SS "template<typename T> void \fBalglib::DoublyLinkedList\fP< T >::InsertAtEnd (const T data)\fR [noexcept]\fP"

.PP
Method for inserting a new node at the end of the doubly linked list\&. It creates a new node with the given data and sets the next pointer of the last node in the list to the new node\&. If the list is empty, it sets the head pointer to the new node\&. 
.PP
\fBParameters\fP
.RS 4
\fIdata\fP Value that will be inserted\&.
.RE
.PP

.PP
Definition at line \fB220\fP of file \fBdoubly_linked_list\&.h\fP\&.
.SS "template<typename T> void \fBalglib::DoublyLinkedList\fP< T >::InsertAtPosition (const uint32_t pos, const T data)"

.PP
Method for inserting a new node at the given position in the doubly linked list\&. If the position is 0, insert at the beginning\&. If the position is equal to the size, insert at the end\&. Otherwise, link it into the middle\&. If pos is out of range, an exception is thrown\&. 
.PP
\fBParameters\fP
.RS 4
\fIpos\fP Position to insert the data (0-based index)\&.
.br
\fIdata\fP Value that will be inserted\&.
.RE
.PP

.PP
Definition at line \fB241\fP of file \fBdoubly_linked_list\&.h\fP\&.
.SS "template<typename T> bool \fBalglib::DoublyLinkedList\fP< T >::IsEmpty () const\fR [noexcept]\fP"

.PP
Method for checking if the doubly linked list is empty\&. 
.PP
\fBReturns\fP
.RS 4
True if the list is empty, false otherwise\&.
.RE
.PP

.PP
Definition at line \fB371\fP of file \fBdoubly_linked_list\&.h\fP\&.
.SS "template<typename T> size_t \fBalglib::DoublyLinkedList\fP< T >::Size () const\fR [noexcept]\fP"

.PP
Method for calculating the number of elements in the doubly linked list\&. It starts at the head of the list and moves to the next node until the end of the list is reached\&. 
.PP
\fBReturns\fP
.RS 4
Number of nodes in list\&.
.RE
.PP

.PP
Definition at line \fB140\fP of file \fBdoubly_linked_list\&.h\fP\&.
.SS "template<typename T> void \fBalglib::DoublyLinkedList\fP< T >::Traverse (const std::function< void(T)> & visit_callback)\fR [noexcept]\fP"

.PP
Method for traversing the doubly linked list\&. It starts at the head of the list and moves to the next node until the end of the list is reached\&. 
.PP
Definition at line \fB124\fP of file \fBdoubly_linked_list\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for AlgLib from the source code\&.
