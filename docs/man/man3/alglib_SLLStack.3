.TH "alglib::SLLStack< T >" 3 "Version 1.0.0" "AlgLib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
alglib::SLLStack< T > \- \fBSLLStack\fP is a stack implementation that uses a singly linked list as a base structure\&. It allocates memory on the heap, so the stack can grow dynamically\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sll_stack\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSLLStack\fP ()"
.br
.RI "Constructor for the \fBSLLStack\fP\&. Initializes the top pointer to nullptr\&. "
.ti -1c
.RI "void \fBPush\fP (T val) noexcept"
.br
.RI "Pushes a value to the top of the stack by creating a new node on the heap and setting the next pointer to the current top\&. The top pointer is then set to the new node\&. "
.ti -1c
.RI "T \fBPop\fP ()"
.br
.RI "Pops the value from the top of the stack and returns it\&. The top node is deleted\&. "
.ti -1c
.RI "T \fBTop\fP () const"
.br
.RI "Returns value from the top of the stack without removing it\&. "
.ti -1c
.RI "bool \fBIsEmpty\fP () const noexcept"
.br
.RI "Checks if the stack is empty by checking if the top pointer is nullptr\&. "
.ti -1c
.RI "size_t \fBSize\fP () const noexcept"
.br
.RI "Calculates size of the stack by traversing the list and counting the nodes\&. "
.ti -1c
.RI "\fB~SLLStack\fP ()"
.br
.RI "Removes all nodes from the stack by traversing the list and deleting each\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T>
.br
class alglib::SLLStack< T >"\fBSLLStack\fP is a stack implementation that uses a singly linked list as a base structure\&. It allocates memory on the heap, so the stack can grow dynamically\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP type of data stored on the stack\&.
.RE
.PP

.PP
Definition at line \fB54\fP of file \fBsll_stack\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T> \fBalglib::SLLStack\fP< T >::SLLStack ()"

.PP
Constructor for the \fBSLLStack\fP\&. Initializes the top pointer to nullptr\&. 
.PP
Definition at line \fB97\fP of file \fBsll_stack\&.h\fP\&.
.SS "template<typename T> \fBalglib::SLLStack\fP< T >::~\fBSLLStack\fP ()"

.PP
Removes all nodes from the stack by traversing the list and deleting each\&. 
.PP
Definition at line \fB169\fP of file \fBsll_stack\&.h\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename T> bool \fBalglib::SLLStack\fP< T >::IsEmpty () const\fR [noexcept]\fP"

.PP
Checks if the stack is empty by checking if the top pointer is nullptr\&. 
.PP
\fBReturns\fP
.RS 4
true if empty, false if not\&.
.RE
.PP

.PP
Definition at line \fB146\fP of file \fBsll_stack\&.h\fP\&.
.SS "template<typename T> T \fBalglib::SLLStack\fP< T >::Pop ()"

.PP
Pops the value from the top of the stack and returns it\&. The top node is deleted\&. 
.PP
\fBReturns\fP
.RS 4
value on top of the stack\&.
.RE
.PP

.PP
Definition at line \fB118\fP of file \fBsll_stack\&.h\fP\&.
.SS "template<typename T> void \fBalglib::SLLStack\fP< T >::Push (T val)\fR [noexcept]\fP"

.PP
Pushes a value to the top of the stack by creating a new node on the heap and setting the next pointer to the current top\&. The top pointer is then set to the new node\&. 
.PP
\fBParameters\fP
.RS 4
\fIval\fP value to be pushed on the stack\&.
.RE
.PP

.PP
Definition at line \fB106\fP of file \fBsll_stack\&.h\fP\&.
.SS "template<typename T> size_t \fBalglib::SLLStack\fP< T >::Size () const\fR [noexcept]\fP"

.PP
Calculates size of the stack by traversing the list and counting the nodes\&. 
.PP
\fBReturns\fP
.RS 4
amount values on stack\&.
.RE
.PP

.PP
Definition at line \fB155\fP of file \fBsll_stack\&.h\fP\&.
.SS "template<typename T> T \fBalglib::SLLStack\fP< T >::Top () const"

.PP
Returns value from the top of the stack without removing it\&. 
.PP
\fBReturns\fP
.RS 4
value on top of the stack\&.
.RE
.PP

.PP
Definition at line \fB134\fP of file \fBsll_stack\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for AlgLib from the source code\&.
