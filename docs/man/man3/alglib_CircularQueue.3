.TH "alglib::CircularQueue< T, capacity >" 3 "Version 1.0.0" "AlgLib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
alglib::CircularQueue< T, capacity > \- \fBCircularQueue\fP class is a queue data structure implemented using an array\&. It doesn't allocate memory on the heap and has a fixed capacity that has to be defined at compile time\&. It uses a circular buffer to store elements\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <circular_queue\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCircularQueue\fP ()"
.br
.RI "Constructor for the \fBCircularQueue\fP\&. It initializes the front index and size to 0\&. "
.ti -1c
.RI "bool \fBIsEmpty\fP () const noexcept"
.br
.RI "Checks if the queue is empty by checking the size value\&. If size is 0, the queue is empty\&. "
.ti -1c
.RI "bool \fBIsFull\fP () const noexcept"
.br
.RI "Checks if the queue is full by comparing the size value to the capacity\&. "
.ti -1c
.RI "T \fBDequeue\fP ()"
.br
.RI "Gets the value from the front of the queue and moves the front index to the next element\&. If the queue is empty (size == 0), it throws a runtime error\&. "
.ti -1c
.RI "void \fBEnqueue\fP (T value)"
.br
.RI "Adds a new value to the rear of the queue\&. If the queue is full, it throws a runtime error\&. Size is increased by 1\&. "
.ti -1c
.RI "T \fBPeekFront\fP () const"
.br
.RI "Gets the value from the front without moving the front index\&. "
.ti -1c
.RI "T \fBPeekRear\fP () const"
.br
.RI "Gets value from the rear of the queue without changing the size of the queue\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T, size_t capacity>
.br
class alglib::CircularQueue< T, capacity >"\fBCircularQueue\fP class is a queue data structure implemented using an array\&. It doesn't allocate memory on the heap and has a fixed capacity that has to be defined at compile time\&. It uses a circular buffer to store elements\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP type that will be stored in queue\&.
.br
\fIcapacity\fP max capacity of queue\&.
.RE
.PP

.PP
Definition at line \fB56\fP of file \fBcircular_queue\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T, size_t capacity> \fBalglib::CircularQueue\fP< T, capacity >::CircularQueue ()"

.PP
Constructor for the \fBCircularQueue\fP\&. It initializes the front index and size to 0\&. 
.PP
Definition at line \fB91\fP of file \fBcircular_queue\&.h\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename T, size_t capacity> T \fBalglib::CircularQueue\fP< T, capacity >::Dequeue ()"

.PP
Gets the value from the front of the queue and moves the front index to the next element\&. If the queue is empty (size == 0), it throws a runtime error\&. 
.PP
\fBReturns\fP
.RS 4
value of front element in queue\&.
.RE
.PP

.PP
Definition at line \fB118\fP of file \fBcircular_queue\&.h\fP\&.
.SS "template<typename T, size_t capacity> void \fBalglib::CircularQueue\fP< T, capacity >::Enqueue (T value)"

.PP
Adds a new value to the rear of the queue\&. If the queue is full, it throws a runtime error\&. Size is increased by 1\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP value to be inserted into queue\&.
.RE
.PP

.PP
Definition at line \fB134\fP of file \fBcircular_queue\&.h\fP\&.
.SS "template<typename T, size_t capacity> bool \fBalglib::CircularQueue\fP< T, capacity >::IsEmpty () const\fR [noexcept]\fP"

.PP
Checks if the queue is empty by checking the size value\&. If size is 0, the queue is empty\&. 
.PP
\fBReturns\fP
.RS 4
true if empty, false if not\&.
.RE
.PP

.PP
Definition at line \fB99\fP of file \fBcircular_queue\&.h\fP\&.
.SS "template<typename T, size_t capacity> bool \fBalglib::CircularQueue\fP< T, capacity >::IsFull () const\fR [noexcept]\fP"

.PP
Checks if the queue is full by comparing the size value to the capacity\&. 
.PP
\fBReturns\fP
.RS 4
true if full, false if not
.RE
.PP

.PP
Definition at line \fB108\fP of file \fBcircular_queue\&.h\fP\&.
.SS "template<typename T, size_t capacity> T \fBalglib::CircularQueue\fP< T, capacity >::PeekFront () const"

.PP
Gets the value from the front without moving the front index\&. 
.PP
\fBReturns\fP
.RS 4
value from the front of the queue\&.
.RE
.PP

.PP
Definition at line \fB148\fP of file \fBcircular_queue\&.h\fP\&.
.SS "template<typename T, size_t capacity> T \fBalglib::CircularQueue\fP< T, capacity >::PeekRear () const"

.PP
Gets value from the rear of the queue without changing the size of the queue\&. 
.PP
\fBReturns\fP
.RS 4
value from the rear of the queue\&.
.RE
.PP

.PP
Definition at line \fB161\fP of file \fBcircular_queue\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for AlgLib from the source code\&.
