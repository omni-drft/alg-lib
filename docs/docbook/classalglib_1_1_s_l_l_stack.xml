<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classalglib_1_1_s_l_l_stack" xml:lang="en-US">
<title>alglib::SLLStack&lt; T &gt; Class Template Reference</title>
<indexterm><primary>alglib::SLLStack&lt; T &gt;</primary></indexterm>
<para>

<para><link linkend="_classalglib_1_1_s_l_l_stack">SLLStack</link> is a stack implementation that uses a singly linked list as a base structure. It allocates memory on the heap, so the stack can grow dynamically. </para>
 
</para>
<para>
<computeroutput>#include &lt;sll_stack.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classalglib_1_1_s_l_l_stack_1ae9c43c9d3e8dfca71d83428fc22f2893">SLLStack</link> ()</para>

<para>Constructor for the <link linkend="_classalglib_1_1_s_l_l_stack">SLLStack</link>. Initializes the top pointer to nullptr. </para>
</listitem>
            <listitem><para>void <link linkend="_classalglib_1_1_s_l_l_stack_1a2d42e7b987f895deae7738b2cf3b6399">Push</link> (T val) noexcept</para>

<para>Pushes a value to the top of the stack by creating a new node on the heap and setting the next pointer to the current top. The top pointer is then set to the new node. </para>
</listitem>
            <listitem><para>T <link linkend="_classalglib_1_1_s_l_l_stack_1a7af12c188430bee708b78c9c9d22a833">Pop</link> ()</para>

<para>Pops the value from the top of the stack and returns it. The top node is deleted. </para>
</listitem>
            <listitem><para>T <link linkend="_classalglib_1_1_s_l_l_stack_1a54548b10e2114a7c43329118d411f966">Top</link> () const</para>

<para>Returns value from the top of the stack without removing it. </para>
</listitem>
            <listitem><para>bool <link linkend="_classalglib_1_1_s_l_l_stack_1a6ff1ce19b121db87a473a80df378a861">IsEmpty</link> () const noexcept</para>

<para>Checks if the stack is empty by checking if the top pointer is nullptr. </para>
</listitem>
            <listitem><para>size_t <link linkend="_classalglib_1_1_s_l_l_stack_1a93f1413805738dc3d94092ab4efc8a1d">Size</link> () const noexcept</para>

<para>Calculates size of the stack by traversing the list and counting the nodes. </para>
</listitem>
            <listitem><para><link linkend="_classalglib_1_1_s_l_l_stack_1a12999b6099d1d7939da4bd9e698bfcb3">~SLLStack</link> ()</para>

<para>Removes all nodes from the stack by traversing the list and deleting each. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename T&gt;<?linebreak?>class alglib::SLLStack&lt; T &gt;</title></simplesect>

<para><link linkend="_classalglib_1_1_s_l_l_stack">SLLStack</link> is a stack implementation that uses a singly linked list as a base structure. It allocates memory on the heap, so the stack can grow dynamically. </para>



<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para>type of data stored on the stack.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_sll__stack_8h_source_1l00054">54</link> of file <link linkend="_sll__stack_8h_source">sll_stack.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classalglib_1_1_s_l_l_stack_1ae9c43c9d3e8dfca71d83428fc22f2893"/><section>
    <title>SLLStack()</title>
<indexterm><primary>SLLStack</primary><secondary>alglib::SLLStack&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SLLStack&lt; T &gt;</primary><secondary>SLLStack</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput><link linkend="_classalglib_1_1_s_l_l_stack">alglib::SLLStack</link>&lt; T &gt;::SLLStack ( )</computeroutput></para><para>

<para>Constructor for the <link linkend="_classalglib_1_1_s_l_l_stack">SLLStack</link>. Initializes the top pointer to nullptr. </para>
</para>
<para>
Definition at line <link linkend="_sll__stack_8h_source_1l00097">97</link> of file <link linkend="_sll__stack_8h_source">sll_stack.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_s_l_l_stack_1a12999b6099d1d7939da4bd9e698bfcb3"/><section>
    <title>~SLLStack()</title>
<indexterm><primary>~SLLStack</primary><secondary>alglib::SLLStack&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SLLStack&lt; T &gt;</primary><secondary>~SLLStack</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput><link linkend="_classalglib_1_1_s_l_l_stack">alglib::SLLStack</link>&lt; T &gt;::~<link linkend="_classalglib_1_1_s_l_l_stack">SLLStack</link> ( )</computeroutput></para><para>

<para>Removes all nodes from the stack by traversing the list and deleting each. </para>
</para>
<para>
Definition at line <link linkend="_sll__stack_8h_source_1l00169">169</link> of file <link linkend="_sll__stack_8h_source">sll_stack.h</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classalglib_1_1_s_l_l_stack_1a6ff1ce19b121db87a473a80df378a861"/><section>
    <title>IsEmpty()</title>
<indexterm><primary>IsEmpty</primary><secondary>alglib::SLLStack&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SLLStack&lt; T &gt;</primary><secondary>IsEmpty</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>bool <link linkend="_classalglib_1_1_s_l_l_stack">alglib::SLLStack</link>&lt; T &gt;::IsEmpty ( ) const<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Checks if the stack is empty by checking if the top pointer is nullptr. </para>
</para>

<para><formalpara><title>Returns</title>

<para>true if empty, false if not.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_sll__stack_8h_source_1l00146">146</link> of file <link linkend="_sll__stack_8h_source">sll_stack.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_s_l_l_stack_1a7af12c188430bee708b78c9c9d22a833"/><section>
    <title>Pop()</title>
<indexterm><primary>Pop</primary><secondary>alglib::SLLStack&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SLLStack&lt; T &gt;</primary><secondary>Pop</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>T <link linkend="_classalglib_1_1_s_l_l_stack">alglib::SLLStack</link>&lt; T &gt;::Pop ( )</computeroutput></para><para>

<para>Pops the value from the top of the stack and returns it. The top node is deleted. </para>
</para>

<para><formalpara><title>Returns</title>

<para>value on top of the stack.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_sll__stack_8h_source_1l00118">118</link> of file <link linkend="_sll__stack_8h_source">sll_stack.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_s_l_l_stack_1a2d42e7b987f895deae7738b2cf3b6399"/><section>
    <title>Push()</title>
<indexterm><primary>Push</primary><secondary>alglib::SLLStack&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SLLStack&lt; T &gt;</primary><secondary>Push</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>void <link linkend="_classalglib_1_1_s_l_l_stack">alglib::SLLStack</link>&lt; T &gt;::Push (T val)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Pushes a value to the top of the stack by creating a new node on the heap and setting the next pointer to the current top. The top pointer is then set to the new node. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>val</entry><entry>
<para>value to be pushed on the stack.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_sll__stack_8h_source_1l00106">106</link> of file <link linkend="_sll__stack_8h_source">sll_stack.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_s_l_l_stack_1a93f1413805738dc3d94092ab4efc8a1d"/><section>
    <title>Size()</title>
<indexterm><primary>Size</primary><secondary>alglib::SLLStack&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SLLStack&lt; T &gt;</primary><secondary>Size</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>size_t <link linkend="_classalglib_1_1_s_l_l_stack">alglib::SLLStack</link>&lt; T &gt;::Size ( ) const<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Calculates size of the stack by traversing the list and counting the nodes. </para>
</para>

<para><formalpara><title>Returns</title>

<para>amount values on stack.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_sll__stack_8h_source_1l00155">155</link> of file <link linkend="_sll__stack_8h_source">sll_stack.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_s_l_l_stack_1a54548b10e2114a7c43329118d411f966"/><section>
    <title>Top()</title>
<indexterm><primary>Top</primary><secondary>alglib::SLLStack&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SLLStack&lt; T &gt;</primary><secondary>Top</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>T <link linkend="_classalglib_1_1_s_l_l_stack">alglib::SLLStack</link>&lt; T &gt;::Top ( ) const</computeroutput></para><para>

<para>Returns value from the top of the stack without removing it. </para>
</para>

<para><formalpara><title>Returns</title>

<para>value on top of the stack.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_sll__stack_8h_source_1l00134">134</link> of file <link linkend="_sll__stack_8h_source">sll_stack.h</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Include/<link linkend="_sll__stack_8h">sll_stack.h</link></section>
</section>
