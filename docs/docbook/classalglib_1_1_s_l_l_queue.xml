<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classalglib_1_1_s_l_l_queue" xml:lang="en-US">
<title>alglib::SLLQueue&lt; T &gt; Class Template Reference</title>
<indexterm><primary>alglib::SLLQueue&lt; T &gt;</primary></indexterm>
<para>

<para><link linkend="_classalglib_1_1_s_l_l_queue">SLLQueue</link> class is a queue data structure implemented using singly linked list. It allocates nodes on the heap. Queue can grow dynamically. There is no limit to the amount of elements besides the memory available. </para>
 
</para>
<para>
<computeroutput>#include &lt;sll_queue.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classalglib_1_1_s_l_l_queue_1a2f5239fecb9f452b1a633596cc9d231f">SLLQueue</link> ()</para>

<para><link linkend="_classalglib_1_1_s_l_l_queue">SLLQueue</link> constructor initializes the front and rear pointers to nullptr. </para>
</listitem>
            <listitem><para>bool <link linkend="_classalglib_1_1_s_l_l_queue_1a71f6c7dd358bc4b9559abed01d2eeb81">IsEmpty</link> () const noexcept</para>

<para>Checks if the queue is empty by checking if the front pointer is nullptr. </para>
</listitem>
            <listitem><para>T <link linkend="_classalglib_1_1_s_l_l_queue_1a75b3e9b159186dfaec8f1dbd0d2ae66d">Dequeue</link> ()</para>

<para>Pops the value from the front of the queue and returns it. The front pointer is then set to the next node in the queue. If the front pointer is nullptr, the rear pointer is also set to nullptr. It deletes the node from the front, so it cannot be accesed after the operation. if the queue is empty, it throws a runtime error. </para>
</listitem>
            <listitem><para>void <link linkend="_classalglib_1_1_s_l_l_queue_1aee3276b1c9da8deaae955ae795ca7a29">Enqueue</link> (T value) noexcept</para>

<para>Adds a new node to the rear of the queue. If the queue is empty, the front and rear pointers are set to the new node. Otherwise, the new node is set as the next node of the rear pointer and the rear pointer is set to the new node. </para>
</listitem>
            <listitem><para>T <link linkend="_classalglib_1_1_s_l_l_queue_1a7495c1918c016e07f3a1470ebc50acfa">PeekFront</link> () const</para>

<para>Gets the value from the front of the queue without removing it. If the queue is empty, it throws a runtime error. </para>
</listitem>
            <listitem><para>T <link linkend="_classalglib_1_1_s_l_l_queue_1af1f002c738edc73b398f2b829f241e89">PeekRear</link> () const</para>

<para>Gets the value from the rear of the queue without removing it. If the queue is empty, it throws a runtime error. </para>
</listitem>
            <listitem><para><link linkend="_classalglib_1_1_s_l_l_queue_1a09a8c3f51d8f97fa373d487db380fe75">~SLLQueue</link> ()</para>

<para>Deletes all nodes from the queue. It starts from the front and deletes all nodes until the rear. It then deletes the rear node. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename T&gt;<?linebreak?>class alglib::SLLQueue&lt; T &gt;</title></simplesect>

<para><link linkend="_classalglib_1_1_s_l_l_queue">SLLQueue</link> class is a queue data structure implemented using singly linked list. It allocates nodes on the heap. Queue can grow dynamically. There is no limit to the amount of elements besides the memory available. </para>



<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para>type that will be stored in queue.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_sll__queue_8h_source_1l00051">51</link> of file <link linkend="_sll__queue_8h_source">sll_queue.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classalglib_1_1_s_l_l_queue_1a2f5239fecb9f452b1a633596cc9d231f"/><section>
    <title>SLLQueue()</title>
<indexterm><primary>SLLQueue</primary><secondary>alglib::SLLQueue&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SLLQueue&lt; T &gt;</primary><secondary>SLLQueue</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput><link linkend="_classalglib_1_1_s_l_l_queue">alglib::SLLQueue</link>&lt; T &gt;::SLLQueue ( )</computeroutput></para><para>

<para><link linkend="_classalglib_1_1_s_l_l_queue">SLLQueue</link> constructor initializes the front and rear pointers to nullptr. </para>
</para>
<para>
Definition at line <link linkend="_sll__queue_8h_source_1l00100">100</link> of file <link linkend="_sll__queue_8h_source">sll_queue.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_s_l_l_queue_1a09a8c3f51d8f97fa373d487db380fe75"/><section>
    <title>~SLLQueue()</title>
<indexterm><primary>~SLLQueue</primary><secondary>alglib::SLLQueue&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SLLQueue&lt; T &gt;</primary><secondary>~SLLQueue</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput><link linkend="_classalglib_1_1_s_l_l_queue">alglib::SLLQueue</link>&lt; T &gt;::~<link linkend="_classalglib_1_1_s_l_l_queue">SLLQueue</link> ( )</computeroutput></para><para>

<para>Deletes all nodes from the queue. It starts from the front and deletes all nodes until the rear. It then deletes the rear node. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_sll__queue_8h_source_1l00184">184</link> of file <link linkend="_sll__queue_8h_source">sll_queue.h</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classalglib_1_1_s_l_l_queue_1a75b3e9b159186dfaec8f1dbd0d2ae66d"/><section>
    <title>Dequeue()</title>
<indexterm><primary>Dequeue</primary><secondary>alglib::SLLQueue&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SLLQueue&lt; T &gt;</primary><secondary>Dequeue</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>T <link linkend="_classalglib_1_1_s_l_l_queue">alglib::SLLQueue</link>&lt; T &gt;::Dequeue ( )</computeroutput></para><para>

<para>Pops the value from the front of the queue and returns it. The front pointer is then set to the next node in the queue. If the front pointer is nullptr, the rear pointer is also set to nullptr. It deletes the node from the front, so it cannot be accesed after the operation. if the queue is empty, it throws a runtime error. </para>
</para>

<para><formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_sll__queue_8h_source_1l00120">120</link> of file <link linkend="_sll__queue_8h_source">sll_queue.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_s_l_l_queue_1aee3276b1c9da8deaae955ae795ca7a29"/><section>
    <title>Enqueue()</title>
<indexterm><primary>Enqueue</primary><secondary>alglib::SLLQueue&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SLLQueue&lt; T &gt;</primary><secondary>Enqueue</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>void <link linkend="_classalglib_1_1_s_l_l_queue">alglib::SLLQueue</link>&lt; T &gt;::Enqueue (T value)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Adds a new node to the rear of the queue. If the queue is empty, the front and rear pointers are set to the new node. Otherwise, the new node is set as the next node of the rear pointer and the rear pointer is set to the new node. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>value</entry><entry>
<para>value to be inserted into queue.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_sll__queue_8h_source_1l00141">141</link> of file <link linkend="_sll__queue_8h_source">sll_queue.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_s_l_l_queue_1a71f6c7dd358bc4b9559abed01d2eeb81"/><section>
    <title>IsEmpty()</title>
<indexterm><primary>IsEmpty</primary><secondary>alglib::SLLQueue&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SLLQueue&lt; T &gt;</primary><secondary>IsEmpty</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>bool <link linkend="_classalglib_1_1_s_l_l_queue">alglib::SLLQueue</link>&lt; T &gt;::IsEmpty ( ) const<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Checks if the queue is empty by checking if the front pointer is nullptr. </para>
</para>

<para><formalpara><title>Returns</title>

<para>true if empty, false if not.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_sll__queue_8h_source_1l00107">107</link> of file <link linkend="_sll__queue_8h_source">sll_queue.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_s_l_l_queue_1a7495c1918c016e07f3a1470ebc50acfa"/><section>
    <title>PeekFront()</title>
<indexterm><primary>PeekFront</primary><secondary>alglib::SLLQueue&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SLLQueue&lt; T &gt;</primary><secondary>PeekFront</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>T <link linkend="_classalglib_1_1_s_l_l_queue">alglib::SLLQueue</link>&lt; T &gt;::PeekFront ( ) const</computeroutput></para><para>

<para>Gets the value from the front of the queue without removing it. If the queue is empty, it throws a runtime error. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_sll__queue_8h_source_1l00157">157</link> of file <link linkend="_sll__queue_8h_source">sll_queue.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_s_l_l_queue_1af1f002c738edc73b398f2b829f241e89"/><section>
    <title>PeekRear()</title>
<indexterm><primary>PeekRear</primary><secondary>alglib::SLLQueue&lt; T &gt;</secondary></indexterm>
<indexterm><primary>alglib::SLLQueue&lt; T &gt;</primary><secondary>PeekRear</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>T <link linkend="_classalglib_1_1_s_l_l_queue">alglib::SLLQueue</link>&lt; T &gt;::PeekRear ( ) const</computeroutput></para><para>

<para>Gets the value from the rear of the queue without removing it. If the queue is empty, it throws a runtime error. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_sll__queue_8h_source_1l00171">171</link> of file <link linkend="_sll__queue_8h_source">sll_queue.h</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Include/<link linkend="_sll__queue_8h">sll_queue.h</link></section>
</section>
