<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classalglib_1_1_array_stack" xml:lang="en-US">
<title>alglib::ArrayStack&lt; T, capacity &gt; Class Template Reference</title>
<indexterm><primary>alglib::ArrayStack&lt; T, capacity &gt;</primary></indexterm>
<para>

<para>Template based stack implementation that uses an array as a base structure. It doesn&apos;t allocate memory on the heap, but it has a fixed capacity that has to be defined at compile time. </para>
 
</para>
<para>
<computeroutput>#include &lt;array_stack.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classalglib_1_1_array_stack_1a460f7b43b43c64104b8f759028269465">ArrayStack</link> ()</para>

<para><link linkend="_classalglib_1_1_array_stack">ArrayStack</link> constructor. Only initializes the topIndex to -1. </para>
</listitem>
            <listitem><para>void <link linkend="_classalglib_1_1_array_stack_1a2291628bed24591b3578963c2bd1bf9f">Push</link> (T val)</para>

<para>Pushes a value to the top of the stack. Handles the topIndex and checks if the stack is full. </para>
</listitem>
            <listitem><para>T <link linkend="_classalglib_1_1_array_stack_1a183556dddf7eac000ffd46e621e1704b">Pop</link> ()</para>

<para>Pops the value from the top of the stack. </para>
</listitem>
            <listitem><para>T <link linkend="_classalglib_1_1_array_stack_1a970fa31de245cb9ce6a295233eba60b3">Top</link> () const</para>

<para>Method that gets the value from the top of the stack without removing it. </para>
</listitem>
            <listitem><para>bool <link linkend="_classalglib_1_1_array_stack_1a4641ea8602ea52567fae4e0ef2baf543">IsEmpty</link> () const noexcept</para>

<para>Method that checks if the stack is empty. </para>
</listitem>
            <listitem><para>bool <link linkend="_classalglib_1_1_array_stack_1a29b20842d905cb7930db87f3b88eb9d3">IsFull</link> () const noexcept</para>

<para>Method that checks if the stack is full. </para>
</listitem>
            <listitem><para>size_t <link linkend="_classalglib_1_1_array_stack_1afc1e214df922b499d02f23d5cb78578c">Size</link> () const noexcept</para>

<para>Method that gets amount of elements in the stack. </para>
</listitem>
            <listitem><para>size_t <link linkend="_classalglib_1_1_array_stack_1ad3be1794c7e2e7b7123e709c5646bba5">Capacity</link> () const noexcept</para>

<para>Method that gets the maximum capacity of the stack. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename T, size_t capacity&gt;<?linebreak?>class alglib::ArrayStack&lt; T, capacity &gt;</title></simplesect>

<para>Template based stack implementation that uses an array as a base structure. It doesn&apos;t allocate memory on the heap, but it has a fixed capacity that has to be defined at compile time. </para>



<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para>type of data stored in stack</para>
</entry>
                            </row>
                            <row>
<entry>capacity</entry><entry>
<para>max capacity of stack (size of array)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_array__stack_8h_source_1l00057">57</link> of file <link linkend="_array__stack_8h_source">array_stack.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classalglib_1_1_array_stack_1a460f7b43b43c64104b8f759028269465"/><section>
    <title>ArrayStack()</title>
<indexterm><primary>ArrayStack</primary><secondary>alglib::ArrayStack&lt; T, capacity &gt;</secondary></indexterm>
<indexterm><primary>alglib::ArrayStack&lt; T, capacity &gt;</primary><secondary>ArrayStack</secondary></indexterm>
<computeroutput>template&lt;typename T, size_t capacity&gt; </computeroutput><para><computeroutput><link linkend="_classalglib_1_1_array_stack">alglib::ArrayStack</link>&lt; T, capacity &gt;::ArrayStack ( )</computeroutput></para><para>

<para><link linkend="_classalglib_1_1_array_stack">ArrayStack</link> constructor. Only initializes the topIndex to -1. </para>
</para>
<para>
Definition at line <link linkend="_array__stack_8h_source_1l00087">87</link> of file <link linkend="_array__stack_8h_source">array_stack.h</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classalglib_1_1_array_stack_1ad3be1794c7e2e7b7123e709c5646bba5"/><section>
    <title>Capacity()</title>
<indexterm><primary>Capacity</primary><secondary>alglib::ArrayStack&lt; T, capacity &gt;</secondary></indexterm>
<indexterm><primary>alglib::ArrayStack&lt; T, capacity &gt;</primary><secondary>Capacity</secondary></indexterm>
<computeroutput>template&lt;typename T, size_t capacity&gt; </computeroutput><para><computeroutput>size_t <link linkend="_classalglib_1_1_array_stack">alglib::ArrayStack</link>&lt; T, capacity &gt;::Capacity ( ) const<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Method that gets the maximum capacity of the stack. </para>
</para>

<para><formalpara><title>Returns</title>

<para>maximum capacity of the stack.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_array__stack_8h_source_1l00159">159</link> of file <link linkend="_array__stack_8h_source">array_stack.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_array_stack_1a4641ea8602ea52567fae4e0ef2baf543"/><section>
    <title>IsEmpty()</title>
<indexterm><primary>IsEmpty</primary><secondary>alglib::ArrayStack&lt; T, capacity &gt;</secondary></indexterm>
<indexterm><primary>alglib::ArrayStack&lt; T, capacity &gt;</primary><secondary>IsEmpty</secondary></indexterm>
<computeroutput>template&lt;typename T, size_t capacity&gt; </computeroutput><para><computeroutput>bool <link linkend="_classalglib_1_1_array_stack">alglib::ArrayStack</link>&lt; T, capacity &gt;::IsEmpty ( ) const<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Method that checks if the stack is empty. </para>
</para>

<para><formalpara><title>Returns</title>

<para>true if empty, false if not</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_array__stack_8h_source_1l00132">132</link> of file <link linkend="_array__stack_8h_source">array_stack.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_array_stack_1a29b20842d905cb7930db87f3b88eb9d3"/><section>
    <title>IsFull()</title>
<indexterm><primary>IsFull</primary><secondary>alglib::ArrayStack&lt; T, capacity &gt;</secondary></indexterm>
<indexterm><primary>alglib::ArrayStack&lt; T, capacity &gt;</primary><secondary>IsFull</secondary></indexterm>
<computeroutput>template&lt;typename T, size_t capacity&gt; </computeroutput><para><computeroutput>bool <link linkend="_classalglib_1_1_array_stack">alglib::ArrayStack</link>&lt; T, capacity &gt;::IsFull ( ) const<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Method that checks if the stack is full. </para>
</para>

<para><formalpara><title>Returns</title>

<para>true if stack is full, false if not.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_array__stack_8h_source_1l00141">141</link> of file <link linkend="_array__stack_8h_source">array_stack.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_array_stack_1a183556dddf7eac000ffd46e621e1704b"/><section>
    <title>Pop()</title>
<indexterm><primary>Pop</primary><secondary>alglib::ArrayStack&lt; T, capacity &gt;</secondary></indexterm>
<indexterm><primary>alglib::ArrayStack&lt; T, capacity &gt;</primary><secondary>Pop</secondary></indexterm>
<computeroutput>template&lt;typename T, size_t capacity&gt; </computeroutput><para><computeroutput>T <link linkend="_classalglib_1_1_array_stack">alglib::ArrayStack</link>&lt; T, capacity &gt;::Pop ( )</computeroutput></para><para>

<para>Pops the value from the top of the stack. </para>
</para>

<para><formalpara><title>Returns</title>

<para>value that was on the top of the stack.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_array__stack_8h_source_1l00108">108</link> of file <link linkend="_array__stack_8h_source">array_stack.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_array_stack_1a2291628bed24591b3578963c2bd1bf9f"/><section>
    <title>Push()</title>
<indexterm><primary>Push</primary><secondary>alglib::ArrayStack&lt; T, capacity &gt;</secondary></indexterm>
<indexterm><primary>alglib::ArrayStack&lt; T, capacity &gt;</primary><secondary>Push</secondary></indexterm>
<computeroutput>template&lt;typename T, size_t capacity&gt; </computeroutput><para><computeroutput>void <link linkend="_classalglib_1_1_array_stack">alglib::ArrayStack</link>&lt; T, capacity &gt;::Push (T val)</computeroutput></para><para>

<para>Pushes a value to the top of the stack. Handles the topIndex and checks if the stack is full. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>val</entry><entry>
<para>value to be pushed.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_array__stack_8h_source_1l00095">95</link> of file <link linkend="_array__stack_8h_source">array_stack.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_array_stack_1afc1e214df922b499d02f23d5cb78578c"/><section>
    <title>Size()</title>
<indexterm><primary>Size</primary><secondary>alglib::ArrayStack&lt; T, capacity &gt;</secondary></indexterm>
<indexterm><primary>alglib::ArrayStack&lt; T, capacity &gt;</primary><secondary>Size</secondary></indexterm>
<computeroutput>template&lt;typename T, size_t capacity&gt; </computeroutput><para><computeroutput>size_t <link linkend="_classalglib_1_1_array_stack">alglib::ArrayStack</link>&lt; T, capacity &gt;::Size ( ) const<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Method that gets amount of elements in the stack. </para>
</para>

<para><formalpara><title>Returns</title>

<para>number of items in the stack.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_array__stack_8h_source_1l00150">150</link> of file <link linkend="_array__stack_8h_source">array_stack.h</link>.</para>
</section>
<anchor xml:id="_classalglib_1_1_array_stack_1a970fa31de245cb9ce6a295233eba60b3"/><section>
    <title>Top()</title>
<indexterm><primary>Top</primary><secondary>alglib::ArrayStack&lt; T, capacity &gt;</secondary></indexterm>
<indexterm><primary>alglib::ArrayStack&lt; T, capacity &gt;</primary><secondary>Top</secondary></indexterm>
<computeroutput>template&lt;typename T, size_t capacity&gt; </computeroutput><para><computeroutput>T <link linkend="_classalglib_1_1_array_stack">alglib::ArrayStack</link>&lt; T, capacity &gt;::Top ( ) const</computeroutput></para><para>

<para>Method that gets the value from the top of the stack without removing it. </para>
</para>

<para><formalpara><title>Returns</title>

<para>vale that is on the top of the stack.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_array__stack_8h_source_1l00120">120</link> of file <link linkend="_array__stack_8h_source">array_stack.h</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Include/<link linkend="_array__stack_8h">array_stack.h</link></section>
</section>
